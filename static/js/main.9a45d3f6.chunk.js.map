{"version":3,"sources":["utils.js","diagram.js","infoBox.js","toolbar.js","elementModal.js","stateTable.js","App.js","serviceWorker.js","index.js","wca-state-machine_pb.js"],"names":["fsmPb","require","FSMElementType","STATE","Symbol","TRANSITION","Object","freeze","getFSMElementType","element","getProcessorsList","isObject","o","getPropertyByString","s","a","replace","split","i","n","length","k","findStatePbByName","stateName","fsm","result","getStatesList","map","state","getName","findTransitionOriginateState","transition","getTransitionsList","curTransition","elementToFormValues","values","elementType","name","isStartState","getStartState","to","getNextState","from","instruction","audio","getInstruction","getAudio","image","getImage","video","getVideo","Error","callable","elementCallables","elementCallableItem","item","type","getCallableName","callableArgs","JSON","parse","getCallableArgs","args","keys","key","push","callableToFormValues","getPredicatesList","getElementCallables","formCallableToElementCallable","callbleFormValue","setFunc","callablePbType","zoo","callableArray","_loop","idx","callableValue","callablePb","setName","setCallableName","setCallableArgs","stringify","allNamesAreValid","curCellNames","valid","includes","getAllNames","formValuesToElement","formValue","initElement","existingNames","undefined","State","addStates","Transition","addTransitions","newName","aux","oldName","setNextState","setStateName","setStartState","setProcessorsList","bind","Processor","procZoo","newFromStateName","oldFromState","index","indexOf","splice","setTransitionFromState","oldFromStateName","instPb","Instruction","setAudio","setImage","setVideo","setInstruction","setPredicatesList","TransitionPredicate","predZoo","adjustVertices","graph","cell","model","joint","dia","Element","_","chain","getConnectedLinks","groupBy","link","omit","source","id","target","each","group","first","value","sourceId","get","previous","targetId","siblings","getLinks","filter","sibling","siblingSourceId","siblingTargetId","numSiblings","unset","sourceCenter","getCell","getBBox","center","targetCenter","midPoint","g","Line","midpoint","theta","offset","Math","ceil","sign","GAP","reverse","angle","toRad","vertex","Point","fromPolar","vertices","shapes","basic","Circle","define","attrs","circle","stroke-width","text","font-weight","standard","Link","line","sourceMarker","width","stroke","smooth","Diagram","_Component","props","_this","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","Graph","adjustGraphVertices","partial","on","state_shape_width","state_shape_height","state_spacing_x","state_spacing_y","state_per_row","cellId2FSMElement","name2Cell","Map","renderAllStates","assertThisInitialized","renderAllTransitions","getStateName2CellMap","clearGraph","removeUnusedCells","inherits","createClass","_this$props","onClickCell","onClickBlank","paperWidth","$el","$","el","console","log","paper","Paper","height","gridSize","restrictTranslate","floor","parseInt","options","clear","stateCells","_this2","has","x","y","label","fsa","position","size","attr","callableItem","addGraphCellWithRef","_this3","states","stateName2Cell","CustomArrow","labels","getElements","jointElement","error","ref","addCell","set","_this4","toDeleteNames","_iteratorNormalCompletion","_didIteratorError","_iteratorError","_step","_iterator","iterator","next","done","err","return","forEach","removeCells","delete","_this5","react_default","createElement","Component","getColumnWidth","rows","accessor","headerText","cellLength","max","apply","toConsumableArray","row","concat","min","InfoBox","imageInstUrl","res","URL","revokeObjectURL","videoInstUrl","blob","Blob","createObjectURL","prepareResource","tableData","callable_name","callable_args","tableColumns","Header","filterMethod","matchSorter","filterAll","Cell","main_default","src","ListGroup_default","style","margin","ListGroupItem_default","variant","Fragment","alt","lib_default","url","className","controls","light","es","data","filterable","defaultFilterMethod","String","columns","defaultPageSize","makeTable","instance","ToolBar","_ref","onImport","onAdd","onExport","onEdit","onDelete","Row_default","ButtonGroup_default","Col_default","sm","react_file_reader_input_lib_default","as","onChange","Button_default","onClick","Dropdown_default","Toggle","Menu","Item","ffmpeg","createFFmpeg","isEmpty","errorMessage","test","isUniqueName","existingItemArray","isDuplicate","BSFormikField","field","placeholder","defaultValue","isValid","objectWithoutProperties","Form_default","Group","Row","Label","column","Control","assign","required","ImageUploadField","createThumbnail","_ref2","asyncToGenerator","regenerator_default","mark","_callee","vFilename","pos","outFile","wrap","_context","prev","isLoaded","load","t0","t1","fetchFile","t2","sent","FS","run","abrupt","stop","_x","_x2","_x3","arguments","imageBytes","form","e","fileArray","fileContent","setFieldValue","Uint8Array","then","VideoUploadField","createVideoClip","_ref3","_callee2","start","end","_context2","_x4","_x5","_x6","_x7","videoBytes","_this$props2","startTime","endTime","parseFloat","SelectFormikField","_ref4","selectOptions","react_select_esm","find","option","onBlur","CallableNameField","_ref5","elementModal_BSFormikField","CallableArgField","_ref6","addFieldError","errors","fieldName","createCallableMultiFields","callableTitle","arrayHelpers","zooOptions","getZooOptions","formik_esm","component","validate","createCallableArgMultiFields","remove","argIndex","ElementModal","React","createRef","onHide","title","_this6","_this$props3","show","onModalCancel","onModalSave","videoUrl","videoName","videoSeekPos","clipStart","clipEnd","callableZoo","callableButtonValue","initValues","getInitModalValuesFromElement","Modal_default","Title","Body","initialValues","onSubmit","_ref7","setSubmitting","render","_ref8","_ref9","checked","seekPos","fsmStateOptions","createTransitionBasicFields","eachCallable","Footer","current","submitForm","StateTable","flatMap","processorsList","processor","App","onChooseFile","files","setState","handleProgress","playedSeconds","numHrs","numMin","numSec","hmsString","join","diagramRef","diagramContainerRef","alert","StateMachine","curFSMElement","modalInitElement","alertMsg","msg","showNewElementModal","newElementModalType","Container_default","fluid","Alert_default","dismissible","accept","onProgress","readOnly","backgroundColor","diagram_Diagram","window","innerWidth","toolbar_ToolBar","infoBox","stateTable","elementModal","fsmData","deserializeBinary","loadFsm","fsmPbSerialized","serializeBinary","saveAs","isSafe","isElementSafeToDelete","elementIdx","hasCurElement","deleteStatePb","deleteTransitionPb","elementView","fsmElement","Boolean","location","hostname","match","ReactDOM","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister","jspb","goog","global","Function","exportSymbol","proto","opt_data","Message","initialize","DEBUG","COMPILED","displayName","GENERATE_TO_OBJECT","prototype","toObject","opt_includeInstance","includeInstance","f","obj","getFieldWithDefault","callableName","callableKwargsMap","getCallableKwargsMap","$jspbMessageInstance","bytes","reader","BinaryReader","deserializeBinaryFromReader","nextField","isEndGroup","getFieldNumber","readString","readMessage","message","readBytes","skipField","writer","BinaryWriter","serializeBinaryToWriter","getResultBuffer","writeString","getLength","writeBytes","setProto3StringField","opt_noLazyCreate","getMapField","clearCallableKwargsMap","getImage_asB64","getVideo_asB64","getImage_asU8","getVideo_asU8","bytesAsB64","bytesAsU8","setProto3BytesField","repeatedFields_","predicatesList","toObjectList","nextState","addPredicates","writeRepeatedMessage","writeMessage","getRepeatedWrapperField","setRepeatedWrapperField","opt_value","opt_index","addToRepeatedWrapperField","clearPredicatesList","getWrapperField","setWrapperField","clearInstruction","hasInstruction","getField","transitionsList","addProcessors","clearProcessorsList","setTransitionsList","clearTransitionsList","statesList","assetsMap","getAssetsMap","startState","setStatesList","clearStatesList","clearAssetsMap","object","extend","exports"],"mappings":"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","file":"static/js/main.9a45d3f6.chunk.js","sourcesContent":["import procZoo from \"./processor-zoo.json\";\nimport predZoo from \"./predicate-zoo.json\";\nvar fsmPb = require(\"./wca-state-machine_pb\");\n\nexport const FSMElementType = {\n    STATE: Symbol(\"state\"),\n    TRANSITION: Symbol(\"transition\"),\n};\nObject.freeze(FSMElementType);\n\n// only support state and transition two types for now\nexport const getFSMElementType = (element) => {\n    return typeof element.getProcessorsList === \"function\"\n        ? FSMElementType.STATE\n        : FSMElementType.TRANSITION;\n};\n\nfunction isObject(o) {\n    //How you acomplish this is upto you.\n    return o === Object(o);\n}\n\n// allow array access using nested not annatation\n// obj = {\n//     'a': ['property': 'test']\n// }\n// e.g. obj['a.0.property']\nexport const getPropertyByString = function(o, s) {\n    if (s) {\n        s = s.replace(/^\\./, \"\"); // strip a leading dot\n        var a = s.split(\".\");\n        for (var i = 0, n = a.length; i < n; ++i) {\n            var k = a[i];\n            if (isObject(o) && k in o) {\n                o = o[k];\n            } else {\n                return;\n            }\n        }\n        return o;\n    } else {\n        return;\n    }\n};\n\nexport const findStatePbByName = function(stateName, fsm) {\n    let result = null;\n    fsm.getStatesList().map((state) => {\n        if (state.getName() === stateName) {\n            result = state;\n        }\n        return null;\n    });\n    return result;\n};\n\nexport const findTransitionOriginateState = function(transition, fsm) {\n    let result = null;\n    fsm.getStatesList().map((state) => {\n        state.getTransitionsList().map((curTransition) => {\n            if (curTransition === transition) {\n                result = state;\n            }\n            return null;\n        });\n        return null;\n    });\n    return result;\n};\n\nconst callableToFormValues = function(elementCallables) {\n    let result = [];\n    elementCallables.map((elementCallableItem) => {\n        let item = {};\n        item.name = elementCallableItem.getName();\n        item.type = elementCallableItem.getCallableName();\n        let callableArgs = JSON.parse(elementCallableItem.getCallableArgs());\n        item.args = {};\n        Object.keys(callableArgs).map((key) => {\n            item.args[key] = callableArgs[key];\n            return null;\n        });\n        result.push(item);\n        return null;\n    });\n    return result;\n};\n\nconst getElementCallables = function(element) {\n    const elementType = getFSMElementType(element);\n    let elementCallables = null;\n    switch (elementType) {\n        case FSMElementType.STATE:\n            elementCallables = element.getProcessorsList();\n            break;\n        case FSMElementType.TRANSITION:\n            elementCallables = element.getPredicatesList();\n            break;\n        default:\n            throw new Error(\n                \"Unsupported Element Type: \" +\n                    elementType +\n                    \". Failed to add a new element\"\n            );\n    }\n    return elementCallables;\n};\n\nexport const elementToFormValues = function(element, fsm) {\n    const values = {};\n    values.callable = [];\n    const elementType = getFSMElementType(element);\n    // name\n    const name = element.getName();\n    values.name = name;\n    // type specific attrs\n    switch (elementType) {\n        case FSMElementType.STATE:\n            values.isStartState = element.getName() === fsm.getStartState();\n            break;\n        case FSMElementType.TRANSITION:\n            values.to = element.getNextState();\n            values.from = findTransitionOriginateState(element, fsm).getName();\n            values.instruction = {};\n            values.instruction.audio = element.getInstruction().getAudio();\n            values.instruction.image = element.getInstruction().getImage();\n            values.instruction.video = element.getInstruction().getVideo();\n            break;\n        default:\n            throw new Error(\n                \"Unsupported Element Type: \" +\n                    elementType +\n                    \". Failed to add a new element\"\n            );\n            break;\n    }\n    // handle callables\n    values.callable = callableToFormValues(getElementCallables(element));\n    // add predicates\n    return values;\n};\n\nconst formCallableToElementCallable = function(\n    callbleFormValue,\n    setFunc,\n    callablePbType,\n    zoo\n) {\n    let callableArray = [];\n    for (let idx = 0; idx < callbleFormValue.length; idx++) {\n        let callableValue = callbleFormValue[idx];\n        let callablePb = new callablePbType();\n        callablePb.setName(callableValue.name);\n        callablePb.setCallableName(callableValue.type);\n        // callable args\n        // need to filter out relevant arguments only\n        // since the form may contain irrelevant arguments for other callable type\n        // this is caused by user switching callable types\n        let args = {};\n        Object.keys(zoo[callableValue.type]).map((key) => {\n            args[key] = callableValue.args[key];\n            return null;\n        });\n        callablePb.setCallableArgs(JSON.stringify(args));\n        callableArray.push(callablePb);\n    }\n    setFunc(callableArray);\n};\n\n/**\n * Change the name of a state\n * @param {*} element\n * @param {*} newName\n * @param {*} fsm\n */\nconst setStateName = function(element, newName, aux) {\n    const { fsm } = aux;\n    let oldName = element.getName();\n    if (oldName) {\n        // need to fix affected transitions nextState when a state name\n        // changes\n        fsm.getStatesList().map((state) => {\n            state.getTransitionsList().map((curTransition) => {\n                if (curTransition.getNextState() === oldName) {\n                    curTransition.setNextState(newName);\n                }\n                return null;\n            });\n            return null;\n        });\n    }\n    element.setName(newName);\n};\n\nconst setTransitionFromState = function(element, newFromStateName, aux) {\n    const { fsm } = aux;\n    let oldFromState = findTransitionOriginateState(element, fsm);\n    if (newFromStateName !== oldFromState.getName()) {\n        // remove the transition from the old state\n        let index = oldFromState.getTransitionsList().indexOf(element);\n        if (index > -1) {\n            oldFromState.getTransitionsList().splice(index, 1);\n        }\n        // add the transition to the new state\n        const fromStatePb = findStatePbByName(newFromStateName, fsm);\n        fromStatePb.addTransitions(element);\n    }\n};\n\nexport const allNamesAreValid = (fsm) => {\n    let curCellNames = [];\n    let valid = true;\n    fsm.getStatesList().map((state) => {\n        if (curCellNames.includes(state.getName())) valid = false;\n        curCellNames.push(state.getName());\n        state.getTransitionsList().map((transition) => {\n            if (curCellNames.includes(transition.getName())) valid = false;\n            curCellNames.push(transition.getName());\n            return null;\n        });\n        return null;\n    });\n    return valid;\n};\n\n/**\n * Get all state and transition names from a FSM\n */\nexport const getAllNames = (fsm) => {\n    let curCellNames = [];\n    fsm.getStatesList().map((state) => {\n        curCellNames.push(state.getName());\n        state.getTransitionsList().map((transition) => {\n            curCellNames.push(transition.getName());\n            return null;\n        });\n        return null;\n    });\n    return curCellNames;\n};\n\n/**\n * Set element from formValue.\n * @param {} formValue\n * @param {*} element: the FSM element to be set.\n */\nexport const formValuesToElement = function(formValue, fsm, type, initElement) {\n    // create or use appropriate element based on type\n    let element = null;\n    let existingNames = getAllNames(fsm);\n    if (initElement === null || initElement === undefined) {\n        debugger;\n        if (existingNames.includes(formValue.name))\n            throw \"Error: Duplicate name! All states and transitions must have unique names.\";\n        switch (type) {\n            case FSMElementType.STATE:\n                element = new fsmPb.State();\n                fsm.addStates(element);\n                break;\n            case FSMElementType.TRANSITION:\n                element = new fsmPb.Transition();\n                // find from state\n                const fromStatePb = findStatePbByName(formValue.from, fsm);\n                fromStatePb.addTransitions(element);\n                break;\n            default:\n                throw new Error(\n                    \"Unsupported Element Type: \" +\n                        type +\n                        \". Failed to add a new element\"\n                );\n        }\n    } else {\n        // if the element name changed and the new name is a duplicate\n        debugger;\n        if (\n            existingNames.includes(formValue.name) &&\n            initElement.getName() !== formValue.name\n        )\n            throw \"Error: Duplicate name! All states and transitions must have unique names.\";\n        element = initElement;\n    }\n\n    // deal with type specific fields\n    switch (type) {\n        case FSMElementType.STATE:\n            setStateName(element, formValue.name, { fsm: fsm });\n            // set start state\n            if (formValue.isStartState) {\n                fsm.setStartState(formValue.name);\n            }\n            // add processors\n            formCallableToElementCallable(\n                formValue.callable,\n                element.setProcessorsList.bind(element), //bind is needed to pass context\n                fsmPb.Processor,\n                procZoo\n            );\n            break;\n        case FSMElementType.TRANSITION:\n            element.setName(formValue.name);\n            // from state\n            setTransitionFromState(element, formValue.from, {\n                fsm: fsm,\n                oldFromStateName: formValue.from,\n            });\n            // to state\n            element.setNextState(formValue.to);\n            // instruction\n            let instPb = new fsmPb.Instruction();\n            if (formValue.instruction) {\n                instPb.setAudio(formValue.instruction.audio);\n                instPb.setImage(formValue.instruction.image);\n                instPb.setVideo(formValue.instruction.video);\n            }\n            element.setInstruction(instPb);\n            // add predicates\n            formCallableToElementCallable(\n                formValue.callable,\n                element.setPredicatesList.bind(element),\n                fsmPb.TransitionPredicate,\n                predZoo\n            );\n            break;\n        default:\n            throw new Error(\n                \"Unsupported Element Type: \" +\n                    type +\n                    \". Failed to add a new element\"\n            );\n    }\n};\n","import React, { Component } from \"react\";\nimport $ from \"jquery\";\nimport joint from \"jointjs\";\nimport _ from \"lodash\";\nimport { getAllNames } from \"./utils\";\n\n// define custom state machine JointJS elements\njoint.shapes.basic.Circle.define(\"fsa.State\", {\n    attrs: {\n        circle: {\n            \"stroke-width\": 2,\n        },\n        text: {\n            \"font-weight\": \"800\",\n        },\n    },\n});\n\njoint.shapes.standard.Link.define(\"fsa.CustomArrow\", {\n    attrs: {\n        line: {\n            sourceMarker: {\n                type: \"circle\",\n                width: 5,\n                stroke: \"none\",\n            },\n        },\n    },\n    smooth: true,\n});\n\nfunction adjustVertices(graph, cell) {\n    // if `cell` is a view, find its model\n    cell = cell.model || cell;\n\n    if (cell instanceof joint.dia.Element) {\n        // `cell` is an element\n\n        _.chain(graph.getConnectedLinks(cell))\n            .groupBy(function(link) {\n                // the key of the group is the model id of the link's source or target\n                // cell id is omitted\n                return _.omit([link.source().id, link.target().id], cell.id)[0];\n            })\n            .each(function(group, key) {\n                // if the member of the group has both source and target model\n                // then adjust vertices\n                if (key !== \"undefined\") adjustVertices(graph, _.first(group));\n            })\n            .value();\n\n        return;\n    }\n\n    // `cell` is a link\n    // get its source and target model IDs\n    var sourceId = cell.get(\"source\").id || cell.previous(\"source\").id;\n    var targetId = cell.get(\"target\").id || cell.previous(\"target\").id;\n\n    // if one of the ends is not a model\n    // (if the link is pinned to paper at a point)\n    // the link is interpreted as having no siblings\n    if (!sourceId || !targetId) {\n        // no vertices needed\n        cell.unset(\"vertices\");\n        return;\n    }\n\n    // identify link siblings\n    var siblings = graph.getLinks().filter(function(sibling) {\n        var siblingSourceId = sibling.source().id;\n        var siblingTargetId = sibling.target().id;\n\n        // if source and target are the same\n        // or if source and target are reversed\n        return (\n            (siblingSourceId === sourceId && siblingTargetId === targetId) ||\n            (siblingSourceId === targetId && siblingTargetId === sourceId)\n        );\n    });\n\n    var numSiblings = siblings.length;\n    switch (numSiblings) {\n        case 0: {\n            // the link has no siblings\n            break;\n        }\n        default: {\n            if (numSiblings === 1) {\n                // there is only one link\n                // no vertices needed\n                cell.unset(\"vertices\");\n            }\n\n            // there are multiple siblings\n            // we need to create vertices\n\n            // find the middle point of the link\n            var sourceCenter = graph\n                .getCell(sourceId)\n                .getBBox()\n                .center();\n            var targetCenter = graph\n                .getCell(targetId)\n                .getBBox()\n                .center();\n            var midPoint = joint.g.Line(sourceCenter, targetCenter).midpoint();\n\n            // find the angle of the link\n            var theta = sourceCenter.theta(targetCenter);\n\n            // constant\n            // the maximum distance between two sibling links\n            var GAP = 20;\n\n            _.each(siblings, function(sibling, index) {\n                // we want offset values to be calculated as 0, 20, 20, 40, 40, 60, 60 ...\n                var offset = GAP * Math.ceil(index / 2);\n\n                // place the vertices at points which are `offset` pixels perpendicularly away\n                // from the first link\n                //\n                // as index goes up, alternate left and right\n                //\n                //  ^  odd indices\n                //  |\n                //  |---->  index 0 sibling - centerline (between source and target centers)\n                //  |\n                //  v  even indices\n                var sign = index % 2 ? 1 : -1;\n\n                // to assure symmetry, if there is an even number of siblings\n                // shift all vertices leftward perpendicularly away from the centerline\n                if (numSiblings % 2 === 0) {\n                    offset -= (GAP / 2) * sign;\n                }\n\n                // make reverse links count the same as non-reverse\n                var reverse = theta < 180 ? 1 : -1;\n\n                // we found the vertex\n                var angle = joint.g.toRad(theta + sign * reverse * 90);\n                var vertex = joint.g.Point.fromPolar(offset, angle, midPoint);\n\n                // replace vertices array with `vertex`\n                sibling.vertices([vertex]);\n            });\n        }\n    }\n}\n\nconst create_transition_cell = (source, target, label) => {\n    var cell = new joint.shapes.fsa.CustomArrow({\n        source: {\n            id: source.id,\n        },\n        target: {\n            id: target.id,\n        },\n        labels: [\n            {\n                position: 0.5,\n                attrs: {\n                    text: {\n                        text: label || \"\",\n                    },\n                },\n            },\n        ],\n    });\n    return cell;\n};\n\nconst create_state_cell = (x, y, label) => {\n    let cell = new joint.shapes.fsa.State({\n        position: {\n            x: x,\n            y: y,\n        },\n        size: {\n            width: 100,\n            height: 100,\n        },\n        attrs: {\n            text: {\n                text: label,\n            },\n        },\n    });\n    return cell;\n};\n\nexport class Diagram extends Component {\n    constructor(props) {\n        super(props);\n        this.graph = new joint.dia.Graph();\n        // bind `graph` to the `adjustVertices` function\n        var adjustGraphVertices = _.partial(adjustVertices, this.graph);\n        // adjust vertices when a cell is removed or its source/target was changed\n        this.graph.on(\n            \"add remove change:source change:target\",\n            adjustGraphVertices\n        );\n\n        this.state_shape_width = 50;\n        this.state_shape_height = 50;\n        this.state_spacing_x = 200;\n        this.state_spacing_y = 150;\n        this.state_per_row = 3;\n        this.cellId2FSMElement = {};\n        this.name2Cell = new Map();\n        this.renderAllStates = this.renderAllStates.bind(this);\n        this.renderAllTransitions = this.renderAllTransitions.bind(this);\n        this.getStateName2CellMap = this.getStateName2CellMap.bind(this);\n        this.clearGraph = this.clearGraph.bind(this);\n        this.removeUnusedCells = this.removeUnusedCells.bind(this);\n    }\n\n    componentDidMount() {\n        const { onClickCell, onClickBlank, paperWidth } = this.props;\n        this.$el = $(this.el);\n        console.log(\"paper width is: \" + paperWidth);\n        const paper = new joint.dia.Paper({\n            el: this.$el,\n            width: paperWidth,\n            height: 5 * paperWidth,\n            gridSize: 1,\n            model: this.graph,\n            restrictTranslate: true,\n        });\n        paper.on(\"cell:pointerdblclick\", onClickCell);\n        paper.on(\"cell:pointerclick\", onClickCell);\n        paper.on(\"blank:pointerclick\", onClickBlank);\n        paper.on(\"blank:pointerclick\", onClickBlank);\n        this.state_per_row =\n            Math.floor(\n                parseInt(paper.options.width, 10) /\n                    (this.state_shape_width + this.state_spacing_x)\n            ) + 1;\n    }\n\n    componentWillUnmount() {\n        this.graph.clear();\n        this.cellId2FSMElement = {};\n    }\n\n    componentDidUpdate() {}\n\n    handleStateCallback(cell) {\n        this.stateCells.push(cell);\n    }\n\n    renderAllStates(fsm) {\n        const stateCells = fsm.getStatesList().map((state, idx) => {\n            if (!this.name2Cell.has(state.getName())) {\n                const cell = create_state_cell(\n                    Math.floor(idx % this.state_per_row) * this.state_spacing_x,\n                    Math.floor(idx / this.state_per_row) * this.state_spacing_y,\n                    state.getName()\n                );\n                // mark start state\n                if (fsm.getStartState() === state.getName()) {\n                    cell.attr(\"circle/stroke-width\", \"5\");\n                }\n                // mark gated state\n                if (state.getProcessorsList()\n                    .map(callableItem => callableItem.getCallableName())\n                    .includes(\"GatedTwoStageProcessor\")\n                ) {\n                    cell.attr(\"circle/fill\", \"yellow\");\n                }\n                this.addGraphCellWithRef(state.getName(), cell, state);\n            }\n            return null;\n        }, this);\n        return stateCells;\n    }\n\n    renderAllTransitions(fsm) {\n        const states = fsm.getStatesList();\n        const stateName2Cell = this.getStateName2CellMap();\n        const transitionCells = states.map((state) => {\n            return state.getTransitionsList().map((transition) => {\n                if (!this.name2Cell.has(transition.getName())) {\n                    const cell = create_transition_cell(\n                        stateName2Cell[state.getName()],\n                        stateName2Cell[transition.getNextState()],\n                        transition.getName()\n                    );\n                    this.addGraphCellWithRef(\n                        transition.getName(),\n                        cell,\n                        transition\n                    );\n                }\n                return null;\n            }, this);\n        }, this);\n        return transitionCells;\n    }\n\n    getStateName2CellMap() {\n        const stateCells = this.graph.getElements();\n        const stateName2Cell = {};\n        stateCells.map((jointElement) => {\n            const stateName = jointElement.attr(\"text/text\");\n            if (stateName in stateName2Cell) {\n                // throw new Error(\"Invalid FSM! Duplicate state name found.\");\n                console.error(\"Duplicate State Name: \" + stateName);\n            } else {\n                stateName2Cell[stateName] = jointElement;\n            }\n            return null;\n        });\n        return stateName2Cell;\n    }\n\n    addGraphCellWithRef(name, cell, ref) {\n        // addGraphCell add a cell to the graph and record the reference object\n        // this cell represents.\n        this.graph.addCell(cell);\n        this.cellId2FSMElement[cell.id] = ref;\n        this.name2Cell.set(name, cell);\n    }\n\n    clearGraph() {\n        this.graph.clear();\n        this.cellId2FSMElement = {};\n        this.name2Cell.clear();\n    }\n\n    removeUnusedCells(fsm) {\n        // first get all valid cell names\n        let curCellNames = getAllNames(fsm);\n        let toDeleteNames = [];\n        for (let key of this.name2Cell.keys()) {\n            if (!curCellNames.includes(key)) {\n                toDeleteNames.push(key);\n            }\n        }\n        toDeleteNames.forEach((name) => {\n            this.graph.removeCells(this.name2Cell.get(name));\n            this.name2Cell.delete(name);\n            return null;\n        });\n    }\n\n    render() {\n        const { fsm } = this.props;\n        if (fsm != null) {\n            // remove old cells, this can be caused either by deletion or renaming\n            this.removeUnusedCells(fsm);\n            this.renderAllStates(fsm);\n            this.renderAllTransitions(fsm);\n        }\n        return <div ref={(el) => (this.el = el)} />;\n    }\n}\n","import React, { Component } from \"react\";\nimport ReactTable from \"react-table\";\nimport matchSorter from \"match-sorter\";\nimport ListGroup from \"react-bootstrap/lib/ListGroup\";\nimport ListGroupItem from \"react-bootstrap/lib/ListGroupItem\";\nimport { FSMElementType, getFSMElementType } from \"./utils.js\";\nimport \"react-table/react-table.css\";\nimport ReactJson from \"react-json-view\";\nimport ReactPlayer from \"react-player\";\n\nexport const getColumnWidth = (rows, accessor, headerText) => {\n  const maxWidth = 100;\n  const magicSpacing = 11;\n  const cellLength = Math.max(\n    ...rows.map(row => (`${row[accessor]}` || \"\").length),\n    headerText.length\n  );\n  return Math.min(maxWidth, cellLength * magicSpacing);\n};\n\nclass InfoBox extends Component {\n  constructor(props) {\n    super(props);\n    this.imageInstUrl = null;\n  }\n\n  prepareResource(element) {\n    let res = {};\n    // clear up urls to prevent leaking memories\n    if (this.imageInstUrl !== null) {\n      URL.revokeObjectURL(this.imageInstUrl);\n    }\n    if (this.videoInstUrl !== null) {\n      URL.revokeObjectURL(this.videoInstUrl);\n    }\n    if (element.getInstruction()) {\n      if (element.getInstruction().getImage()) {\n        let blob = new Blob([element.getInstruction().getImage()], {\n          type: \"image\"\n        });\n        this.imageInstUrl = URL.createObjectURL(blob);\n        res.imageInstUrl = this.imageInstUrl;\n      }\n      if (element.getInstruction().getVideo()) {\n        let blob = new Blob([element.getInstruction().getVideo()], {\n          type: \"video\"\n        });\n        this.videoInstUrl = URL.createObjectURL(blob);\n        res.videoInstUrl = this.videoInstUrl;\n      }\n    }\n    return res;\n  }\n\n  render() {\n    const { element } = this.props;\n    const elementType = getFSMElementType(element);\n\n    // prepare resources\n    let res = {};\n    if (elementType === FSMElementType.TRANSITION) {\n      res = this.prepareResource(element);\n    }\n\n    const tableData =\n      elementType === FSMElementType.STATE\n        ? element.getProcessorsList().map(callableItem => {\n            return {\n              name: callableItem.getName(),\n              callable_name: callableItem.getCallableName(),\n              callable_args: JSON.parse(callableItem.getCallableArgs())\n            };\n          })\n        : element.getPredicatesList().map(callableItem => {\n            return {\n              name: callableItem.getName(),\n              callable_name: callableItem.getCallableName(),\n              callable_args: JSON.parse(callableItem.getCallableArgs())\n            };\n          });\n    const tableColumns = [\n      {\n        Header: \"Name\",\n        accessor: \"name\",\n        filterMethod: (filter, rows) =>\n          matchSorter(rows, filter.value, { keys: [\"name\"] }),\n        filterAll: true,\n        width: getColumnWidth(tableData, \"name\", \"Name\")\n      },\n      {\n        Header: \"Type\",\n        accessor: \"callable_name\",\n        filterMethod: (filter, rows) =>\n          matchSorter(rows, filter.value, {\n            keys: [\"callable_name\"]\n          }),\n        filterAll: true,\n        width: getColumnWidth(tableData, \"callable_name\", \"Type\")\n      },\n      {\n        Header: \"Arguments\",\n        accessor: \"callable_args\",\n        filterMethod: (filter, rows) =>\n          matchSorter(rows, filter.value, {\n            keys: [\"callable_args\"]\n          }),\n        Cell: row => <ReactJson src={row.value} />,\n        filterAll: true\n      }\n    ];\n    return (\n      <ListGroup style={{ width: \"100%\", margin: \"20px\" }}>\n        <ListGroupItem variant=\"secondary\">\n          Name: {element.getName()}\n        </ListGroupItem>\n        <ListGroupItem variant=\"secondary\">\n          Type: {elementType === FSMElementType.STATE ? \"State\" : \"Transition\"}\n        </ListGroupItem>\n        {elementType === FSMElementType.TRANSITION && (\n          <>\n            <ListGroupItem variant=\"secondary\">Instruction</ListGroupItem>\n            <ListGroupItem>\n              Audio: {element.getInstruction().getAudio()}\n            </ListGroupItem>\n            {res.imageInstUrl ? (\n              <ListGroupItem>\n                Image: <img src={res.imageInstUrl} alt=\"instruction\" width=\"100%\" height=\"100%\" />\n              </ListGroupItem>\n            ) : (\n              <ListGroupItem>Image: </ListGroupItem>\n            )}\n            {res.videoInstUrl ? (\n              <ListGroupItem>\n                Video: <ReactPlayer url={res.videoInstUrl}\n                                    className=\"react-player\"\n                                    controls\n                                    light\n                                    width=\"100%\"\n                                    height=\"100%\" />\n              </ListGroupItem>\n            ) : (\n              <ListGroupItem>Video: </ListGroupItem>\n            )}\n          </>\n        )}\n        <ListGroupItem variant=\"secondary\">\n          {elementType === FSMElementType.STATE\n            ? \"Processors\"\n            : \"Transition Predicates\"}\n        </ListGroupItem>\n        <ReactTable\n          data={tableData}\n          filterable\n          defaultFilterMethod={(filter, row) =>\n            String(row[filter.id]) === filter.value\n          }\n          columns={tableColumns}\n          defaultPageSize={3}\n        >\n          {(state, makeTable, instance) => {\n            return <div>{makeTable()}</div>;\n          }}\n        </ReactTable>\n      </ListGroup>\n    );\n  }\n}\n\nexport default InfoBox;\n","import React from \"react\";\nimport Button from \"react-bootstrap/lib/Button\";\nimport ButtonGroup from \"react-bootstrap/lib/ButtonGroup\";\nimport Dropdown from \"react-bootstrap/lib/Dropdown\";\nimport Row from \"react-bootstrap/lib/Row\";\nimport Col from \"react-bootstrap/lib/Col\";\nimport FileReaderInput from \"react-file-reader-input\";\nimport { FSMElementType } from \"./utils.js\";\nimport \"./App.css\";\n\nexport const ToolBar = ({\n  onImport,\n  onAdd,\n  onExport,\n  onEdit,\n  onDelete\n}) => {\n  return (\n    <>\n      <Row>\n        <ButtonGroup>\n          <Col sm={3}>\n            <FileReaderInput as=\"buffer\" onChange={onImport}>\n              <Button variant=\"primary\" className=\"fw-btn\">Import</Button>\n            </FileReaderInput>\n          </Col>\n          <Col sm={3}>\n            <Button variant=\"primary\" onClick={onExport} className=\"fw-btn\">\n              Export\n          </Button>\n          </Col>\n          <Col sm={3}>\n            <Dropdown>\n              <Dropdown.Toggle id=\"dropdown-add\" className=\"fw-btn\">Add</Dropdown.Toggle>\n              <Dropdown.Menu>\n                <Dropdown.Item onClick={() => onAdd(FSMElementType.STATE)}>State</Dropdown.Item>\n                <Dropdown.Item onClick={() => onAdd(FSMElementType.TRANSITION)}>Transition</Dropdown.Item>\n              </Dropdown.Menu>\n            </Dropdown>\n          </Col>\n          <Col sm={3}>\n            <Button variant=\"primary\" onClick={onEdit} className=\"fw-btn\">\n              Edit\n          </Button>\n          </Col>\n          <Col sm={3}>\n            <Button variant=\"primary\" onClick={onDelete} className=\"fw-btn\">\n              Delete\n          </Button>\n          </Col>\n        </ButtonGroup>\n      </Row>\n    </>\n  );\n};\n","import React, { Component } from \"react\";\nimport Modal from \"react-bootstrap/lib/Modal\";\nimport Button from \"react-bootstrap/lib/Button\";\nimport Form from \"react-bootstrap/lib/Form\";\nimport Col from \"react-bootstrap/lib/Col\";\nimport Row from \"react-bootstrap/lib/Row\";\nimport { Formik, Form as FormikForm, Field, FieldArray } from \"formik\";\nimport FileReaderInput from \"react-file-reader-input\";\nimport \"./App.css\";\nimport Select from \"react-select\";\nimport procZoo from \"./processor-zoo.json\";\nimport predZoo from \"./predicate-zoo.json\";\nimport {\n    FSMElementType,\n    getPropertyByString,\n    elementToFormValues,\n    getAllNames,\n} from \"./utils.js\";\nimport { createFFmpeg, fetchFile } from '@ffmpeg/ffmpeg';\n\nconst ffmpeg = createFFmpeg({\n    log: true,\n});\n\n/** Helper function to create options for Select elements\n * from a pre-defined callable zoo (procZoo or predZoo)\n *\n * @param {*} zoo\n */\nconst getZooOptions = (zoo) => {\n    return Object.keys(zoo).map((key) => {\n        return { value: key, label: key };\n    });\n};\n\n/** Custom validate functions for Formik forms\n *\n * Formik has a wierd return requirement\n * if invalid, return a string containing the error message or return undefined.\n *\n * return null if valid, a string if invalid\n * @param {*} param0\n */\nconst isEmpty = (value) => {\n    let errorMessage = null;\n    if (value === undefined || value === null || !/^.+$/i.test(value)) {\n        errorMessage = \"Required. Cannot be empty.\";\n    }\n    return errorMessage;\n};\n\n/**\n * return null if valid, a string if invalid\n * @param {*} value\n * @param {*} existingItemArray\n */\nconst isDuplicate = (value, existingItemArray) => {\n    let errorMessage = null;\n    if (\n        value === undefined ||\n        value === null ||\n        existingItemArray.includes(value)\n    ) {\n        errorMessage =\n            \"Duplicate name. All states and transitions must have unique names.\";\n    }\n    return errorMessage;\n};\n\n/**\n * return null if valid, a string if invalid\n */\nconst isUniqueName = (value, existingItemArray) => {\n    return isEmpty(value) || isDuplicate(value, existingItemArray) || null;\n};\n\n/*\nCustomize the look of form fields using bootstrap.\nThese following React components should be passed as the \"component\"\nproperty of a Formik field.\n*/\nconst BSFormikField = ({\n    field, // { name, value, onChange, onBlur }\n    type,\n    label,\n    placeholder,\n    defaultValue,\n    isValid,\n    ...props\n}) => (\n    <Form.Group as={Row}>\n        <Form.Label column>{label}</Form.Label>\n        <Col>\n            <Form.Control\n                required\n                {...field}\n                {...props}\n                type={type}\n                placeholder={placeholder}\n                value={field.value || defaultValue || \"\"} // to supress uncontrolled to controlled warning\n                isValid={isValid}\n            />\n        </Col>\n    </Form.Group>\n);\n\nclass ImageUploadField extends Component {\n    constructor(props) {\n        super(props);\n        this.imageInstUrl = null;\n    }\n\n    prepareResource(imageBytes) {\n        // clear up urls to prevent leaking memories\n        if (this.imageInstUrl !== null) {\n            URL.revokeObjectURL(this.imageInstUrl);\n        }\n        let blob = new Blob([imageBytes], {\n            type: \"image\",\n        });\n        this.imageInstUrl = URL.createObjectURL(blob);\n        return {\n            imageInstUrl: this.imageInstUrl,\n        };\n    }\n\n    createThumbnail = async (url, vFilename, pos) => {\n        if (!ffmpeg.isLoaded()) {\n            await ffmpeg.load();\n        }\n        ffmpeg.FS('writeFile', vFilename, await fetchFile(url));\n        const outFile = \"out\" + vFilename + \".png\"\n        await ffmpeg.run('-ss', pos, '-i', vFilename, '-frames:v', '1', outFile);\n        return ffmpeg.FS('readFile', outFile)\n    };\n\n    render() {\n        const { field, form, label, url, vFilename, pos } = this.props;\n        let res = {};\n        if (field.value) {\n            res = this.prepareResource(field.value);\n        }\n        return (\n            <Form.Group as={Row}>\n                <Form.Label column>{label}</Form.Label>\n                {res.imageInstUrl && (\n                    <Form.Label column sm={1}>\n                        <img\n                            src={res.imageInstUrl}\n                            alt=\"instruction\"\n                            style={{ width: 40, height: 40 }}\n                        />\n                    </Form.Label>\n                )}\n                <Col>\n                    <FileReaderInput\n                        as=\"buffer\"\n                        onChange={(e, fileArray) => {\n                            fileArray.forEach((result) => {\n                                const e = result[0];\n                                let fileContent = e.target.result;\n                                form.setFieldValue(\n                                    field.name,\n                                    new Uint8Array(fileContent)\n                                );\n                            });\n                        }}\n                    >\n                        <Button variant=\"light\" className=\"fw-btn\">\n                            New Image\n                        </Button>\n                    </FileReaderInput>\n                </Col>\n                <Col>\n                    <Button\n                        variant=\"light\"\n                        className=\"fw-btn\"\n                        onClick={() => {\n                            if (url) {\n                                this.createThumbnail(url, vFilename, pos).then(value => {\n                                    form.setFieldValue(\n                                        field.name,\n                                        value\n                                    );\n                                })\n                            }\n                        }}\n                    >\n                        Use Current Frame\n                    </Button>\n                </Col>\n            </Form.Group>\n        );\n    }\n}\n\nclass VideoUploadField extends Component {\n    constructor(props) {\n        super(props);\n        this.videoInstUrl = null;\n    }\n\n    prepareResource(videoBytes) {\n        // clear up urls to prevent leaking memories\n        if (this.videoInstUrl !== null) {\n            URL.revokeObjectURL(this.videoInstUrl);\n        }\n        let blob = new Blob([videoBytes], {\n            type: \"video\",\n        });\n        this.videoInstUrl = URL.createObjectURL(blob);\n        return {\n            videoInstUrl: this.videoInstUrl,\n        };\n    }\n\n    createVideoClip = async (url, vFilename, start, end) => {\n        if (!ffmpeg.isLoaded()) {\n            await ffmpeg.load();\n        }\n        ffmpeg.FS('writeFile', vFilename, await fetchFile(url));\n        const outFile = \"out\" + vFilename\n        await ffmpeg.run('-ss', start, '-to', end, '-i', vFilename, '-c', 'copy', outFile);\n        return ffmpeg.FS('readFile', outFile)\n    };\n\n    render() {\n        const { field, form, label, url, vFilename, start, end } = this.props;\n        let res = {};\n        if (field.value) {\n            res = this.prepareResource(field.value);\n        }\n        return (\n            <Form.Group as={Row}>\n                <Form.Label column>{label}</Form.Label>\n                {res.videoInstUrl && (\n                    <Form.Label column sm={1}>\n                        <video width=\"40\">\n                            <source src={res.videoInstUrl} />\n                        </video>\n                    </Form.Label>\n                )}\n                <Col>\n                    <FileReaderInput\n                        as=\"buffer\"\n                        onChange={(e, fileArray) => {\n                            fileArray.forEach((result) => {\n                                const e = result[0];\n                                let fileContent = e.target.result;\n                                form.setFieldValue(\n                                    field.name,\n                                    new Uint8Array(fileContent)\n                                );\n                            });\n                        }}\n                    >\n                        <Button variant=\"light\" className=\"fw-btn\">\n                            New Video\n                        </Button>\n                    </FileReaderInput>\n                </Col>\n                <Col>\n                    <Button\n                        variant=\"light\"\n                        className=\"fw-btn\"\n                        onClick={() => {\n                            if (url && start && end) {\n                                const startTime = start.split(\":\")\n                                const endTime = end.split(\":\")\n                                const startSec = parseInt(startTime[0]) * 3600\n                                    + parseInt(startTime[1]) * 60\n                                    + parseFloat(startTime[2])\n                                const endSec = parseInt(endTime[0]) * 3600\n                                    + parseInt(endTime[1]) * 60\n                                    + parseFloat(endTime[2])\n                                if (startSec < endSec) {\n                                    this.createVideoClip(url, vFilename, start, end).then(value => {\n                                        form.setFieldValue(\n                                            field.name,\n                                            value\n                                        );\n                                    })\n                                }\n                            }\n                        }}\n                    >\n                        Use Video Clip\n                    </Button>\n                </Col>\n            </Form.Group>\n        );\n    }\n}\n\n/** Custom the look of a Formik Select field with react-select\n *\n * @param {*} param0\n */\nconst SelectFormikField = ({\n    field,\n    form, // values, setXXXX, handleXXXX, dirty, isValid, status, etc.\n    label,\n    selectOptions,\n    ...props\n}) => (\n    <Form.Group as={Row}>\n        <Form.Label column>{label}</Form.Label>\n        <Col>\n            <Select\n                {...field}\n                {...props}\n                options={selectOptions}\n                name={field.name}\n                value={\n                    selectOptions\n                        ? selectOptions.find(\n                              (option) => option.value === field.value\n                          )\n                        : \"\"\n                }\n                onChange={(option) =>\n                    form.setFieldValue(field.name, option.value)\n                }\n                onBlur={field.onBlur}\n            />\n        </Col>\n    </Form.Group>\n);\n\nconst CallableNameField = ({\n    field, // name, value, onChange, onBlur\n    ...props\n}) => (\n    <BSFormikField\n        field={field}\n        type=\"text\"\n        label=\"name\"\n        placeholder=\"Enter Name\"\n        {...props}\n    />\n);\n\nconst CallableArgField = ({\n    field,\n    key, // unused. not passed to the field. just to suppress parent's react list warning\n    label,\n    placeholder,\n    ...props\n}) => (\n    <BSFormikField\n        field={field}\n        type=\"text\"\n        label={label}\n        placeholder={placeholder}\n        {...props}\n    />\n);\n\nconst addFieldError = (errors, fieldName) => {\n    if (getPropertyByString(errors, fieldName)) {\n        return (\n            <div className=\"text-danger\">\n                {getPropertyByString(errors, fieldName)}\n            </div>\n        );\n    } else {\n        return null;\n    }\n};\n\n/*\nFunctions to create a group of form field to present a \"callable\".\nThe UIs to create a \"callable\" consist of following form fields:\n1. callable name\n2. callable type\n3. A field for each callable argument (loaded from callable zoos)\n*/\nconst createCallableMultiFields = (\n    callableTitle,\n    zoo,\n    values,\n    index,\n    arrayHelpers,\n    errors\n) => {\n    const zooOptions = getZooOptions(zoo);\n    return (\n        <div key={index} className=\"border\">\n            <h6>{callableTitle}</h6>\n            <Field\n                name={`callable.${index}.name`} // add values.callable[index].name\n                component={CallableNameField}\n                validate={isEmpty}\n            />\n            {addFieldError(errors, `callable.${index}.name`)}\n            <Field\n                name={`callable.${index}.type`} // add values.callable[index].name\n                component={SelectFormikField}\n                label=\"Type\"\n                selectOptions={zooOptions}\n                validate={isEmpty}\n            />\n            {addFieldError(errors, `callable.${index}.type`)}\n            {getPropertyByString(values, `callable.${index}.type`) &&\n                createCallableArgMultiFields(\n                    zoo[values[\"callable\"][index][\"type\"]],\n                    index,\n                    errors\n                )}\n            <Form.Row>\n                <Button\n                    variant=\"danger\"\n                    className=\"btn-block\"\n                    onClick={() => arrayHelpers.remove({ index })}\n                >\n                    Delete\n                </Button>\n            </Form.Row>\n        </div>\n    );\n};\n\n/*\nCreate a field for each callable argument.\n*/\nconst createCallableArgMultiFields = (args, index, errors) => {\n    const argFields = Object.keys(args).map((key, argIndex) => {\n        return (\n            <div key={index + \".arg.\" + argIndex}>\n                <Field\n                    name={`callable.${index}.args.${key}`} // add values.callable[0].name\n                    component={CallableArgField}\n                    label={key}\n                    placeholder={args[key]}\n                    defaultValue=\"\"\n                    validate={isEmpty}\n                />\n                {addFieldError(errors, `callable.${index}.args.${key}`)}\n            </div>\n        );\n    });\n    return argFields;\n};\n\n/** Create transition basic fields including\n * from and to state, and instructions.\n *\n * @param {*} values\n */\nconst createTransitionBasicFields = (fsm, form, errors, videoUrl, videoName, seekPos, clipStart, clipEnd) => {\n    const fsmStateOptions = fsm.getStatesList().map((state) => {\n        return { value: state.getName(), label: state.getName() };\n    });\n    return (\n        <>\n            <Field\n                name=\"from\"\n                component={SelectFormikField}\n                label=\"From State\"\n                selectOptions={fsmStateOptions}\n                validate={isEmpty}\n            />\n            {addFieldError(errors, \"from\")}\n            <Field\n                name=\"to\"\n                component={SelectFormikField}\n                label=\"To State\"\n                selectOptions={fsmStateOptions}\n                validate={isEmpty}\n            />\n            {addFieldError(errors, \"to\")}\n            <Field\n                name=\"instruction.audio\"\n                component={BSFormikField}\n                type=\"text\"\n                label=\"Audio Instruction\"\n                defaultValue=\"\"\n            />\n            <Field\n                name=\"instruction.image\"\n                component={ImageUploadField}\n                label=\"Image Instruction\"\n                url={videoUrl}\n                vFilename={videoName}\n                pos={seekPos}\n            />\n            <Field\n                name=\"instruction.video\"\n                component={VideoUploadField}\n                label=\"Video Instruction\"\n                url={videoUrl}\n                vFilename={videoName}\n                start={clipStart}\n                end={clipEnd}\n            />\n        </>\n    );\n};\n\n/**\n * A Modal used to create a new FSM element.\n * The core of the modal is a Formik form that captures\n * the user-inputted properties for the element\n */\nclass ElementModal extends Component {\n    constructor(props) {\n        super(props);\n        this.form = React.createRef();\n        this.onHide = this.onHide.bind(this);\n    }\n\n    onHide() {\n        // do nothing\n    }\n\n    getInitModalValuesFromElement(element, fsm) {\n        if (element === null) {\n            return {\n                callable: [],\n            };\n        } else {\n            return elementToFormValues(element, fsm);\n        }\n    }\n\n    render() {\n        const {\n            show,\n            type,\n            fsm,\n            onModalCancel,\n            onModalSave,\n            initElement,\n            videoUrl,\n            videoName,\n            videoSeekPos,\n            clipStart,\n            clipEnd\n        } = this.props;\n\n        let title,\n            callableTitle = \"\";\n        let callableZoo = null;\n        let callableButtonValue = \"\";\n        switch (type) {\n            case FSMElementType.STATE:\n                title = \"State\";\n                callableTitle = \"New Processor\";\n                callableButtonValue = \"Add Processor\";\n                callableZoo = procZoo;\n                break;\n            case FSMElementType.TRANSITION:\n                title = \"Transition\";\n                callableTitle = \"New Predicate\";\n                callableButtonValue = \"Add Predicate\";\n                callableZoo = predZoo;\n                break;\n            default:\n                throw new Error(\n                    \"Unsupported Element Type: \" +\n                        type +\n                        \". Failed to add a new element\"\n                );\n        }\n\n        const initValues = this.getInitModalValuesFromElement(initElement, fsm);\n\n        return (\n            <Modal show={show} onHide={this.onHide}>\n                <Modal.Header>\n                    <Modal.Title>{title}</Modal.Title>\n                </Modal.Header>\n                <Modal.Body>\n                    <Formik\n                        ref={this.form}\n                        initialValues={initValues}\n                        onSubmit={(values, { props, setSubmitting }) => {\n                            onModalSave(type, values, initElement);\n                            setSubmitting(false);\n                        }}\n                        render={({ form, values, errors }) => (\n                            <FormikForm>\n                                <FieldArray\n                                    name=\"callable\"\n                                    render={(arrayHelpers) => {\n                                        return (\n                                            <>\n                                                {type ===\n                                                    FSMElementType.STATE && (\n                                                    <>\n                                                        <Field\n                                                            name=\"name\"\n                                                            component={\n                                                                BSFormikField\n                                                            }\n                                                            type=\"text\"\n                                                            label=\"Name\"\n                                                            validate={(\n                                                                value\n                                                            ) => {\n                                                                if (\n                                                                    initElement ===\n                                                                        null ||\n                                                                    initElement ===\n                                                                        undefined\n                                                                ) {\n                                                                    const existingItemArray = getAllNames(\n                                                                        fsm\n                                                                    );\n                                                                    return isUniqueName(\n                                                                        value,\n                                                                        existingItemArray\n                                                                    );\n                                                                } else {\n                                                                    return isEmpty(\n                                                                        value\n                                                                    );\n                                                                }\n                                                            }}\n                                                        />\n                                                        {addFieldError(\n                                                            errors,\n                                                            \"name\"\n                                                        )}\n                                                        <Field name=\"isStartState\">\n                                                            {({\n                                                                field,\n                                                                form,\n                                                            }) => {\n                                                                return (\n                                                                    <Form.Group\n                                                                        as={Row}\n                                                                    >\n                                                                        <Form.Label\n                                                                            column\n                                                                        >\n                                                                            Start\n                                                                            from\n                                                                            this\n                                                                            state?\n                                                                        </Form.Label>\n                                                                        <Col>\n                                                                            <Form.Control\n                                                                                type=\"checkbox\"\n                                                                                checked={\n                                                                                    values[\n                                                                                        field\n                                                                                            .name\n                                                                                    ] || \"\"\n                                                                                }\n                                                                                onChange={() => {\n                                                                                    if (\n                                                                                        values[\n                                                                                            field\n                                                                                                .name\n                                                                                        ]\n                                                                                    ) {\n                                                                                        form.setFieldValue(\n                                                                                            field.name,\n                                                                                            false\n                                                                                        );\n                                                                                    } else {\n                                                                                        form.setFieldValue(\n                                                                                            field.name,\n                                                                                            true\n                                                                                        );\n                                                                                    }\n                                                                                }}\n                                                                            />\n                                                                        </Col>\n                                                                    </Form.Group>\n                                                                );\n                                                            }}\n                                                        </Field>\n                                                    </>\n                                                )}\n                                                {type ===\n                                                    FSMElementType.TRANSITION && (\n                                                    <>\n                                                        <Field\n                                                            name=\"name\"\n                                                            component={\n                                                                BSFormikField\n                                                            }\n                                                            type=\"text\"\n                                                            label=\"Name\"\n                                                            validate={(\n                                                                value\n                                                            ) => {\n                                                                if (\n                                                                    initElement ===\n                                                                        null ||\n                                                                    initElement ===\n                                                                        undefined\n                                                                ) {\n                                                                    const existingItemArray = getAllNames(\n                                                                        fsm\n                                                                    );\n                                                                    return isUniqueName(\n                                                                        value,\n                                                                        existingItemArray\n                                                                    );\n                                                                } else {\n                                                                    return isEmpty(\n                                                                        value\n                                                                    );\n                                                                }\n                                                            }}\n                                                        />\n                                                        {addFieldError(\n                                                            errors,\n                                                            \"name\"\n                                                        )}\n                                                        {createTransitionBasicFields(\n                                                            fsm,\n                                                            form,\n                                                            errors,\n                                                            videoUrl,\n                                                            videoName,\n                                                            videoSeekPos,\n                                                            clipStart,\n                                                            clipEnd\n                                                        )}\n                                                    </>\n                                                )}\n                                                {values.callable.map(\n                                                    (eachCallable, index) =>\n                                                        createCallableMultiFields(\n                                                            callableTitle,\n                                                            callableZoo,\n                                                            values,\n                                                            index,\n                                                            arrayHelpers,\n                                                            errors\n                                                        )\n                                                )}\n                                                <Form.Row>\n                                                    <Button\n                                                        variant=\"info\"\n                                                        className=\"btn-block\"\n                                                        onClick={() =>\n                                                            arrayHelpers.push(\n                                                                {}\n                                                            )\n                                                        }\n                                                    >\n                                                        {callableButtonValue}\n                                                    </Button>\n                                                </Form.Row>\n                                            </>\n                                        );\n                                    }}\n                                />\n                            </FormikForm>\n                        )}\n                    />\n                </Modal.Body>\n                <Modal.Footer>\n                    <Button variant=\"secondary\" onClick={onModalCancel}>\n                        Close\n                    </Button>\n                    <Button\n                        variant=\"primary\"\n                        onClick={(e) => {\n                            this.form.current.submitForm();\n                        }}\n                    >\n                        Save Changes\n                    </Button>\n                </Modal.Footer>\n            </Modal>\n        );\n    }\n}\n\nexport default ElementModal;\n","import React, { Component } from \"react\";\nimport ReactTable from \"react-table\";\nimport matchSorter from \"match-sorter\";\nimport { getColumnWidth } from \"./infoBox.js\"\nimport \"react-table/react-table.css\";\nimport ReactJson from \"react-json-view\";\n\nclass StateTable extends Component {\n    render() {\n        const { fsm } = this.props;\n        const tableData = fsm.getStatesList().flatMap((state, idx) => {\n            const stateName = state.getName();\n            const processorsList = state.getProcessorsList()\n            if (processorsList === undefined || processorsList.length === 0) {\n                return [{\n                    state: stateName,\n                    processor: \"\",\n                    callable_name: \"\",\n                    callable_args: {}\n                }];\n            } else {\n                return processorsList.map(callableItem => {\n                    return {\n                        state: stateName,\n                        processor: callableItem.getName(),\n                        callable_name: callableItem.getCallableName(),\n                        callable_args: JSON.parse(callableItem.getCallableArgs())\n                    };\n                })\n            }\n        })\n        const tableColumns = [\n            {\n                Header: \"State\",\n                accessor: \"state\",\n                filterMethod: (filter, rows) =>\n                    matchSorter(rows, filter.value, { keys: [\"state\"] }),\n                filterAll: true,\n                width: getColumnWidth(tableData, \"state\", \"State\")\n            },\n            {\n                Header: \"Processor\",\n                accessor: \"processor\",\n                filterMethod: (filter, rows) =>\n                    matchSorter(rows, filter.value, { keys: [\"processor\"] }),\n                filterAll: true,\n                width: getColumnWidth(tableData, \"processor\", \"Processor\")\n            },\n            {\n                Header: \"Type\",\n                accessor: \"callable_name\",\n                filterMethod: (filter, rows) =>\n                    matchSorter(rows, filter.value, {\n                        keys: [\"callable_name\"]\n                    }),\n                filterAll: true,\n                width: getColumnWidth(tableData, \"callable_name\", \"Type\")\n            },\n            {\n                Header: \"Arguments\",\n                accessor: \"callable_args\",\n                filterMethod: (filter, rows) =>\n                    matchSorter(rows, filter.value, {\n                        keys: [\"callable_args\"]\n                    }),\n                Cell: row => <ReactJson src={row.value} />,\n                filterAll: true\n            }\n        ];\n        return (\n            <ReactTable\n                data={tableData}\n                filterable\n                defaultFilterMethod={(filter, row) =>\n                    String(row[filter.id]) === filter.value\n                }\n                columns={tableColumns}\n                defaultPageSize={10}\n            >\n                {(state, makeTable, instance) => {\n                    return <div>{makeTable()}</div>;\n                }}\n            </ReactTable>\n        );\n    }\n}\n\nexport default StateTable;\n","import React, { Component } from \"react\";\nimport Container from \"react-bootstrap/lib/Container\";\nimport Row from \"react-bootstrap/lib/Row\";\nimport Col from \"react-bootstrap/lib/Col\";\nimport Alert from \"react-bootstrap/lib/Alert\";\nimport { Diagram } from \"./diagram.js\";\nimport \"./App.css\";\nimport InfoBox from \"./infoBox.js\";\nimport { ToolBar } from \"./toolbar.js\";\nimport {\n    FSMElementType,\n    getFSMElementType,\n    formValuesToElement,\n    allNamesAreValid,\n} from \"./utils.js\";\nimport ElementModal from \"./elementModal.js\";\nimport saveAs from \"file-saver\";\nimport ReactPlayer from \"react-player\";\nimport Form from \"react-bootstrap/lib/Form\";\nimport Button from \"react-bootstrap/lib/Button\";\nimport StateTable from \"./stateTable\";\nvar fsmPb = require(\"./wca-state-machine_pb\");\n\nfunction loadFsm(fsmData) {\n    let fsm = null;\n    try {\n        fsm = fsmPb.StateMachine.deserializeBinary(fsmData);\n    } catch (err) {\n        throw \"Incorrect file format. \" + err;\n    }\n    if (fsm && !allNamesAreValid(fsm)) {\n        throw \"FSM contains duplicate names! For this web editor to work properly, \" +\n            \"all states and transitions need to have unique names.\" +\n            \"If you create the FSM using the python library, make sure to assign unique names for states and transitions.\";\n    }\n    return fsm;\n}\n\nclass App extends Component {\n    constructor(props) {\n        super(props);\n        this.diagramRef = React.createRef();\n        this.diagramContainerRef = React.createRef();\n        this.alert = this.alert.bind(this);\n        this.onImport = this.onImport.bind(this);\n        this.onExport = this.onExport.bind(this);\n        this.onAdd = this.onAdd.bind(this);\n        this.onDelete = this.onDelete.bind(this);\n        this.onEdit = this.onEdit.bind(this);\n        this.onClickCell = this.onClickCell.bind(this);\n        this.onClickBlank = this.onClickBlank.bind(this);\n        this.onModalCancel = this.onModalCancel.bind(this);\n        this.onModalSave = this.onModalSave.bind(this);\n        this.clipStart = React.createRef();\n        this.clipEnd = React.createRef();\n        this.state = {\n            fsm: new fsmPb.StateMachine(),\n            curFSMElement: null,\n            modalInitElement: null,\n            alertMsg: {\n                show: true,\n                type: \"info\",\n                msg: \"Welcome to State Machine Editor!\",\n            },\n            showNewElementModal: false,\n            newElementModalType: null,\n            videoUrl: null,\n            videoName: null,\n            playedSeconds: null,\n        };\n    }\n\n    render() {\n        return (\n            <Container fluid>\n                <h1>OpenWorkflow State Machine Editor</h1>\n                {this.state.alertMsg.msg !== \"\" && (\n                    <Alert dismissible variant={this.state.alertMsg.type}>\n                        {this.state.alertMsg.msg}\n                    </Alert>\n                )}\n                <Row>\n                    <Col sm={3}>\n                        <h4>Upload Video</h4>\n                        <div className='player-wrapper'>\n                            <input onChange={this.onChooseFile} type='file' accept='video/*' />\n                            <ReactPlayer\n                                url={this.state.videoUrl}\n                                className='react-player'\n                                controls\n                                width='100%'\n                                height='100%'\n                                onProgress={this.handleProgress}\n                            />\n                            {this.state.videoUrl && (\n                                <Form>\n                                    <Form.Group as={Row}>\n                                        <Form.Label column>Video Clip Start</Form.Label>\n                                        <Col>\n                                            <Form.Control\n                                                type=\"text\"\n                                                placeholder=\"HH:mm:ss.xxx\"\n                                                ref={this.clipStart}\n                                                readOnly\n                                            />\n                                            <Button\n                                                variant=\"primary\"\n                                                className=\"fw-btn\"\n                                                onClick={() => {\n                                                    this.clipStart.current.value = this.state.playedSeconds\n                                                }}\n                                            >\n                                                Use Current Frame\n                                            </Button>\n                                        </Col>\n\n                                    </Form.Group>\n                                    <Form.Group as={Row}>\n                                        <Form.Label column>Video Clip End</Form.Label>\n                                        <Col>\n                                            <Form.Control\n                                                type=\"text\"\n                                                placeholder=\"HH:mm:ss.xxx\"\n                                                ref={this.clipEnd}\n                                                readOnly\n                                            />\n                                            <Button\n                                                variant=\"primary\"\n                                                className=\"fw-btn\"\n                                                onClick={() => {\n                                                    this.clipEnd.current.value = this.state.playedSeconds\n                                                }}\n                                            >\n                                                Use Current Frame\n                                            </Button>\n                                        </Col>\n                                    </Form.Group>\n                                </Form>\n                            )}\n                        </div>\n                    </Col>\n                    <Col\n                        sm={4}\n                        ref={this.diagramContainerRef}\n                        style={{ backgroundColor: \"lavender\" }}\n                    >\n                        <h4>Diagram</h4>\n                        <Diagram\n                            fsm={this.state.fsm}\n                            onClickCell={this.onClickCell}\n                            onClickBlank={this.onClickBlank}\n                            ref={this.diagramRef}\n                            paperWidth={window.innerWidth / 3} // 1/3 of current window's inner width\n                        />\n                    </Col>\n                    <Col sm={5}>\n                        <ToolBar\n                            onImport={this.onImport}\n                            onAdd={this.onAdd}\n                            onExport={this.onExport}\n                            onDelete={this.onDelete}\n                            onEdit={this.onEdit}\n                        />\n                        {this.state.curFSMElement ? (\n                            <Row>\n                                <InfoBox\n                                    element={this.state.curFSMElement}\n                                    style={{ width: \"100%\" }}\n                                />\n                            </Row>\n                        ) : (\n                            <div>\n                                <StateTable fsm={this.state.fsm} />\n                            </div>\n                        )}\n                    </Col>\n                </Row>\n                <footer>\n                    <Container>\n                        <span className=\"text-muted\">\n                            Copyright Carnegie Mellon University\n                        </span>\n                    </Container>\n                </footer>\n                {this.state.showNewElementModal && (\n                    <ElementModal\n                        fsm={this.state.fsm} // new elements may depend on existing elements (e.g. adding a transition between two states)\n                        show={this.state.showNewElementModal}\n                        type={this.state.newElementModalType}\n                        initElement={this.state.modalInitElement} // if element is not null, then edit the element\n                        onModalSave={this.onModalSave}\n                        onModalCancel={this.onModalCancel}\n                        videoUrl={this.state.videoUrl}\n                        videoName={this.state.videoName}\n                        videoSeekPos={this.state.playedSeconds}\n                        clipStart={this.clipStart.current ? this.clipStart.current.value : null}\n                        clipEnd={this.clipEnd.current? this.clipEnd.current.value : null}\n                    />\n                )}\n            </Container>\n        );\n    }\n\n    alert(type, msg) {\n        this.setState({\n            alertMsg: {\n                type: type,\n                msg: msg,\n            },\n        });\n    }\n\n    onChooseFile = e => {\n        // clear up urls to prevent leaking memories\n        if (this.state.videoUrl !== null) {\n            URL.revokeObjectURL(this.state.videoUrl);\n            this.clipStart.current.value = null;\n            this.clipEnd.current.value = null;\n        }\n        const url = URL.createObjectURL(e.target.files[0]);\n        this.setState({ videoUrl: url, videoName: e.target.files[0].name });\n    }\n\n    handleProgress = state => {\n        // Time format conversion\n        const pos = state.playedSeconds\n        const numHrs = Math.floor(pos / 3600);\n        const numMin = Math.floor(pos / 60) % 60;\n        const numSec = pos - numHrs * 3600 - numMin * 60;\n        const hmsString = [\n            (numHrs < 10) ? \"0\" + numHrs : \"\" + numHrs,\n            (numMin < 10) ? \"0\" + numMin : \"\" + numMin,\n            (numSec < 10) ? \"0\" + Math.floor(numSec * 1000) / 1000 : \"\" + Math.floor(numSec * 1000) / 1000,\n        ].join(\":\");\n        this.setState({ playedSeconds: hmsString });\n    }\n\n    // toolbar callbacks\n    onImport(e, fileArray) {\n        fileArray.forEach((result) => {\n            const e = result[0];\n            let fileContent = e.target.result;\n            let fsm = null;\n            try {\n                fsm = loadFsm(fileContent);\n                this.setState({ fsm: fsm, curFSMElement: null });\n                this.alert(\"info\", \"Success! State machine imported.\");\n            } catch (err) {\n                this.alert(\"danger\", \"Failed to import the file. \\n\" + err);\n            }\n        });\n    }\n\n    onExport() {\n        const fsmPb = this.state.fsm;\n        if (fsmPb.getStatesList().length === 0) {\n            this.alert(\n                \"danger\",\n                \"Empty state machine! There is nothing to save. \\n\"\n            );\n        } else {\n            // TODO(junjuew): fix start state. It should be marked by users\n            // instead of being the first state added\n            if (fsmPb.getStartState() === \"\") {\n                fsmPb.setStartState(fsmPb.getStatesList()[0].getName());\n            }\n            let fsmPbSerialized = fsmPb.serializeBinary();\n            let blob = new Blob([fsmPbSerialized], {\n                type: \"application/octet-stream\",\n            });\n            saveAs(blob, \"app.pbfsm\");\n        }\n    }\n\n    onAdd(type) {\n        this.setState({ showNewElementModal: true, newElementModalType: type });\n    }\n\n    isElementSafeToDelete(element) {\n        const fsm = this.state.fsm;\n        const elementType = getFSMElementType(element);\n        let isSafe = true;\n        switch (elementType) {\n            case FSMElementType.STATE:\n                // check if there are transitions starting from this state\n                if (element.getTransitionsList().length > 0) isSafe = false;\n                // check if there are transitions ending at this state\n                fsm.getStatesList().map((state) => {\n                    state.getTransitionsList().map((transition) => {\n                        if (transition.getNextState() === element.getName()) {\n                            isSafe = false;\n                        }\n                        return null;\n                    });\n                    return null;\n                });\n                return isSafe;\n            case FSMElementType.TRANSITION:\n                return isSafe;\n            default:\n                throw new Error(\"Unsupported Element Type: \" + elementType);\n        }\n    }\n\n    deleteStatePb(element) {\n        const fsm = this.state.fsm;\n        if (this.isElementSafeToDelete(element)) {\n            const elementIdx = fsm.getStatesList().indexOf(element);\n            fsm.getStatesList().splice(elementIdx, 1);\n            this.setState({ fsm: fsm, curFSMElement: null });\n        } else {\n            return this.alert(\n                \"danger\",\n                \"A state cannot be deleted unless all transitions to/from it have been deleted.\"\n            );\n        }\n    }\n\n    deleteTransitionPb(element) {\n        const fsm = this.state.fsm;\n        if (this.isElementSafeToDelete(element)) {\n            // find the state this transition belons to and removes it from\n            // the transitions list\n            fsm.getStatesList().map((state) => {\n                const elementIdx = state.getTransitionsList().indexOf(element);\n                if (elementIdx >= 0) {\n                    state\n                        .getTransitionsList()\n                        .splice(elementIdx, elementIdx + 1);\n                }\n                return null;\n            });\n            this.setState({ fsm: fsm, curFSMElement: null });\n        } else {\n            return this.alert(\n                \"danger\",\n                \"The transition cannot be safely deleted\"\n            );\n        }\n    }\n\n    hasCurElement() {\n        const element = this.state.curFSMElement;\n        if (element === null) {\n            this.alert(\n                \"danger\",\n                \"There is no element selected. Double-click to select an element.\"\n            );\n            return false;\n        }\n        return true;\n    }\n\n    onEdit() {\n        if (this.hasCurElement()) {\n            const element = this.state.curFSMElement;\n            const elementType = getFSMElementType(element);\n            this.setState({\n                showNewElementModal: true,\n                newElementModalType: elementType,\n                modalInitElement: element,\n            });\n        }\n    }\n\n    onDelete() {\n        if (this.hasCurElement()) {\n            const element = this.state.curFSMElement;\n            const elementType = getFSMElementType(element);\n            switch (elementType) {\n                case FSMElementType.STATE:\n                    this.deleteStatePb(element);\n                    break;\n                case FSMElementType.TRANSITION:\n                    this.deleteTransitionPb(element);\n                    break;\n                default:\n                    throw new Error(\"Unsupported Element Type: \" + elementType);\n            }\n        }\n    }\n\n    // diagram callbacks\n    onClickCell(elementView) {\n        const fsmElement = this.diagramRef.current.cellId2FSMElement[\n            elementView.model.id\n        ];\n        this.setState({\n            curFSMElement: fsmElement,\n        });\n    }\n\n    onClickBlank(elementView) {\n        this.setState({\n            curFSMElement: null,\n        });\n    }\n\n    onModalSave(type, formValue, initElement) {\n        const fsm = this.state.fsm;\n        try {\n            formValuesToElement(formValue, fsm, type, initElement);\n            this.setState({ fsm: fsm });\n            this.setState({\n                showNewElementModal: false,\n                modalInitElement: null,\n            });\n        } catch (err) {\n            this.setState({\n                showNewElementModal: false,\n                modalInitElement: null,\n            });\n            this.alert(\"danger\", err);\n        }\n    }\n\n    onModalCancel() {\n        this.setState({ showNewElementModal: false, modalInitElement: null });\n    }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","/* eslint-disable */\n/**\n * @fileoverview\n * @enhanceable\n * @suppress {messageConventions} JS Compiler reports an error if a variable or\n *     field starts with 'MSG_' and isn't a translatable message.\n * @public\n */\n// GENERATED CODE -- DO NOT EDIT!\n\nvar jspb = require('google-protobuf');\nvar goog = jspb;\nvar global = Function('return this')();\n\ngoog.exportSymbol('proto.Instruction', null, global);\ngoog.exportSymbol('proto.Processor', null, global);\ngoog.exportSymbol('proto.State', null, global);\ngoog.exportSymbol('proto.StateMachine', null, global);\ngoog.exportSymbol('proto.Transition', null, global);\ngoog.exportSymbol('proto.TransitionPredicate', null, global);\n\n/**\n * Generated by JsPbCodeGenerator.\n * @param {Array=} opt_data Optional initial data array, typically from a\n * server response, or constructed directly in Javascript. The array is used\n * in place and becomes part of the constructed object. It is not cloned.\n * If no data is provided, the constructed object will be empty, but still\n * valid.\n * @extends {jspb.Message}\n * @constructor\n */\nproto.TransitionPredicate = function(opt_data) {\n  jspb.Message.initialize(this, opt_data, 0, -1, null, null);\n};\ngoog.inherits(proto.TransitionPredicate, jspb.Message);\nif (goog.DEBUG && !COMPILED) {\n  proto.TransitionPredicate.displayName = 'proto.TransitionPredicate';\n}\n\n\nif (jspb.Message.GENERATE_TO_OBJECT) {\n/**\n * Creates an object representation of this proto suitable for use in Soy templates.\n * Field names that are reserved in JavaScript and will be renamed to pb_name.\n * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.\n * For the list of reserved names please see:\n *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.\n * @param {boolean=} opt_includeInstance Whether to include the JSPB instance\n *     for transitional soy proto support: http://goto/soy-param-migration\n * @return {!Object}\n */\nproto.TransitionPredicate.prototype.toObject = function(opt_includeInstance) {\n  return proto.TransitionPredicate.toObject(opt_includeInstance, this);\n};\n\n\n/**\n * Static version of the {@see toObject} method.\n * @param {boolean|undefined} includeInstance Whether to include the JSPB\n *     instance for transitional soy proto support:\n *     http://goto/soy-param-migration\n * @param {!proto.TransitionPredicate} msg The msg instance to transform.\n * @return {!Object}\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\nproto.TransitionPredicate.toObject = function(includeInstance, msg) {\n  var f, obj = {\n    name: jspb.Message.getFieldWithDefault(msg, 1, \"\"),\n    callableName: jspb.Message.getFieldWithDefault(msg, 2, \"\"),\n    callableKwargsMap: (f = msg.getCallableKwargsMap()) ? f.toObject(includeInstance, undefined) : [],\n    callableArgs: jspb.Message.getFieldWithDefault(msg, 4, \"\")\n  };\n\n  if (includeInstance) {\n    obj.$jspbMessageInstance = msg;\n  }\n  return obj;\n};\n}\n\n\n/**\n * Deserializes binary data (in protobuf wire format).\n * @param {jspb.ByteSource} bytes The bytes to deserialize.\n * @return {!proto.TransitionPredicate}\n */\nproto.TransitionPredicate.deserializeBinary = function(bytes) {\n  var reader = new jspb.BinaryReader(bytes);\n  var msg = new proto.TransitionPredicate;\n  return proto.TransitionPredicate.deserializeBinaryFromReader(msg, reader);\n};\n\n\n/**\n * Deserializes binary data (in protobuf wire format) from the\n * given reader into the given message object.\n * @param {!proto.TransitionPredicate} msg The message object to deserialize into.\n * @param {!jspb.BinaryReader} reader The BinaryReader to use.\n * @return {!proto.TransitionPredicate}\n */\nproto.TransitionPredicate.deserializeBinaryFromReader = function(msg, reader) {\n  while (reader.nextField()) {\n    if (reader.isEndGroup()) {\n      break;\n    }\n    var field = reader.getFieldNumber();\n    switch (field) {\n    case 1:\n      var value = /** @type {string} */ (reader.readString());\n      msg.setName(value);\n      break;\n    case 2:\n      var value = /** @type {string} */ (reader.readString());\n      msg.setCallableName(value);\n      break;\n    case 3:\n      var value = msg.getCallableKwargsMap();\n      reader.readMessage(value, function(message, reader) {\n        jspb.Map.deserializeBinary(message, reader, jspb.BinaryReader.prototype.readString, jspb.BinaryReader.prototype.readBytes, null, \"\");\n         });\n      break;\n    case 4:\n      var value = /** @type {string} */ (reader.readString());\n      msg.setCallableArgs(value);\n      break;\n    default:\n      reader.skipField();\n      break;\n    }\n  }\n  return msg;\n};\n\n\n/**\n * Serializes the message to binary data (in protobuf wire format).\n * @return {!Uint8Array}\n */\nproto.TransitionPredicate.prototype.serializeBinary = function() {\n  var writer = new jspb.BinaryWriter();\n  proto.TransitionPredicate.serializeBinaryToWriter(this, writer);\n  return writer.getResultBuffer();\n};\n\n\n/**\n * Serializes the given message to binary data (in protobuf wire\n * format), writing to the given BinaryWriter.\n * @param {!proto.TransitionPredicate} message\n * @param {!jspb.BinaryWriter} writer\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\nproto.TransitionPredicate.serializeBinaryToWriter = function(message, writer) {\n  var f = undefined;\n  f = message.getName();\n  if (f.length > 0) {\n    writer.writeString(\n      1,\n      f\n    );\n  }\n  f = message.getCallableName();\n  if (f.length > 0) {\n    writer.writeString(\n      2,\n      f\n    );\n  }\n  f = message.getCallableKwargsMap(true);\n  if (f && f.getLength() > 0) {\n    f.serializeBinary(3, writer, jspb.BinaryWriter.prototype.writeString, jspb.BinaryWriter.prototype.writeBytes);\n  }\n  f = message.getCallableArgs();\n  if (f.length > 0) {\n    writer.writeString(\n      4,\n      f\n    );\n  }\n};\n\n\n/**\n * optional string name = 1;\n * @return {string}\n */\nproto.TransitionPredicate.prototype.getName = function() {\n  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, \"\"));\n};\n\n\n/** @param {string} value */\nproto.TransitionPredicate.prototype.setName = function(value) {\n  jspb.Message.setProto3StringField(this, 1, value);\n};\n\n\n/**\n * optional string callable_name = 2;\n * @return {string}\n */\nproto.TransitionPredicate.prototype.getCallableName = function() {\n  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, \"\"));\n};\n\n\n/** @param {string} value */\nproto.TransitionPredicate.prototype.setCallableName = function(value) {\n  jspb.Message.setProto3StringField(this, 2, value);\n};\n\n\n/**\n * map<string, bytes> callable_kwargs = 3;\n * @param {boolean=} opt_noLazyCreate Do not create the map if\n * empty, instead returning `undefined`\n * @return {!jspb.Map<string,!(string|Uint8Array)>}\n */\nproto.TransitionPredicate.prototype.getCallableKwargsMap = function(opt_noLazyCreate) {\n  return /** @type {!jspb.Map<string,!(string|Uint8Array)>} */ (\n      jspb.Message.getMapField(this, 3, opt_noLazyCreate,\n      null));\n};\n\n\nproto.TransitionPredicate.prototype.clearCallableKwargsMap = function() {\n  this.getCallableKwargsMap().clear();\n};\n\n\n/**\n * optional string callable_args = 4;\n * @return {string}\n */\nproto.TransitionPredicate.prototype.getCallableArgs = function() {\n  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, \"\"));\n};\n\n\n/** @param {string} value */\nproto.TransitionPredicate.prototype.setCallableArgs = function(value) {\n  jspb.Message.setProto3StringField(this, 4, value);\n};\n\n\n\n/**\n * Generated by JsPbCodeGenerator.\n * @param {Array=} opt_data Optional initial data array, typically from a\n * server response, or constructed directly in Javascript. The array is used\n * in place and becomes part of the constructed object. It is not cloned.\n * If no data is provided, the constructed object will be empty, but still\n * valid.\n * @extends {jspb.Message}\n * @constructor\n */\nproto.Instruction = function(opt_data) {\n  jspb.Message.initialize(this, opt_data, 0, -1, null, null);\n};\ngoog.inherits(proto.Instruction, jspb.Message);\nif (goog.DEBUG && !COMPILED) {\n  proto.Instruction.displayName = 'proto.Instruction';\n}\n\n\nif (jspb.Message.GENERATE_TO_OBJECT) {\n/**\n * Creates an object representation of this proto suitable for use in Soy templates.\n * Field names that are reserved in JavaScript and will be renamed to pb_name.\n * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.\n * For the list of reserved names please see:\n *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.\n * @param {boolean=} opt_includeInstance Whether to include the JSPB instance\n *     for transitional soy proto support: http://goto/soy-param-migration\n * @return {!Object}\n */\nproto.Instruction.prototype.toObject = function(opt_includeInstance) {\n  return proto.Instruction.toObject(opt_includeInstance, this);\n};\n\n\n/**\n * Static version of the {@see toObject} method.\n * @param {boolean|undefined} includeInstance Whether to include the JSPB\n *     instance for transitional soy proto support:\n *     http://goto/soy-param-migration\n * @param {!proto.Instruction} msg The msg instance to transform.\n * @return {!Object}\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\nproto.Instruction.toObject = function(includeInstance, msg) {\n  var f, obj = {\n    name: jspb.Message.getFieldWithDefault(msg, 1, \"\"),\n    audio: jspb.Message.getFieldWithDefault(msg, 2, \"\"),\n    image: msg.getImage_asB64(),\n    video: msg.getVideo_asB64()\n  };\n\n  if (includeInstance) {\n    obj.$jspbMessageInstance = msg;\n  }\n  return obj;\n};\n}\n\n\n/**\n * Deserializes binary data (in protobuf wire format).\n * @param {jspb.ByteSource} bytes The bytes to deserialize.\n * @return {!proto.Instruction}\n */\nproto.Instruction.deserializeBinary = function(bytes) {\n  var reader = new jspb.BinaryReader(bytes);\n  var msg = new proto.Instruction;\n  return proto.Instruction.deserializeBinaryFromReader(msg, reader);\n};\n\n\n/**\n * Deserializes binary data (in protobuf wire format) from the\n * given reader into the given message object.\n * @param {!proto.Instruction} msg The message object to deserialize into.\n * @param {!jspb.BinaryReader} reader The BinaryReader to use.\n * @return {!proto.Instruction}\n */\nproto.Instruction.deserializeBinaryFromReader = function(msg, reader) {\n  while (reader.nextField()) {\n    if (reader.isEndGroup()) {\n      break;\n    }\n    var field = reader.getFieldNumber();\n    switch (field) {\n    case 1:\n      var value = /** @type {string} */ (reader.readString());\n      msg.setName(value);\n      break;\n    case 2:\n      var value = /** @type {string} */ (reader.readString());\n      msg.setAudio(value);\n      break;\n    case 3:\n      var value = /** @type {!Uint8Array} */ (reader.readBytes());\n      msg.setImage(value);\n      break;\n    case 4:\n      var value = /** @type {!Uint8Array} */ (reader.readBytes());\n      msg.setVideo(value);\n      break;\n    default:\n      reader.skipField();\n      break;\n    }\n  }\n  return msg;\n};\n\n\n/**\n * Serializes the message to binary data (in protobuf wire format).\n * @return {!Uint8Array}\n */\nproto.Instruction.prototype.serializeBinary = function() {\n  var writer = new jspb.BinaryWriter();\n  proto.Instruction.serializeBinaryToWriter(this, writer);\n  return writer.getResultBuffer();\n};\n\n\n/**\n * Serializes the given message to binary data (in protobuf wire\n * format), writing to the given BinaryWriter.\n * @param {!proto.Instruction} message\n * @param {!jspb.BinaryWriter} writer\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\nproto.Instruction.serializeBinaryToWriter = function(message, writer) {\n  var f = undefined;\n  f = message.getName();\n  if (f.length > 0) {\n    writer.writeString(\n      1,\n      f\n    );\n  }\n  f = message.getAudio();\n  if (f.length > 0) {\n    writer.writeString(\n      2,\n      f\n    );\n  }\n  f = message.getImage_asU8();\n  if (f.length > 0) {\n    writer.writeBytes(\n      3,\n      f\n    );\n  }\n  f = message.getVideo_asU8();\n  if (f.length > 0) {\n    writer.writeBytes(\n      4,\n      f\n    );\n  }\n};\n\n\n/**\n * optional string name = 1;\n * @return {string}\n */\nproto.Instruction.prototype.getName = function() {\n  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, \"\"));\n};\n\n\n/** @param {string} value */\nproto.Instruction.prototype.setName = function(value) {\n  jspb.Message.setProto3StringField(this, 1, value);\n};\n\n\n/**\n * optional string audio = 2;\n * @return {string}\n */\nproto.Instruction.prototype.getAudio = function() {\n  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, \"\"));\n};\n\n\n/** @param {string} value */\nproto.Instruction.prototype.setAudio = function(value) {\n  jspb.Message.setProto3StringField(this, 2, value);\n};\n\n\n/**\n * optional bytes image = 3;\n * @return {!(string|Uint8Array)}\n */\nproto.Instruction.prototype.getImage = function() {\n  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 3, \"\"));\n};\n\n\n/**\n * optional bytes image = 3;\n * This is a type-conversion wrapper around `getImage()`\n * @return {string}\n */\nproto.Instruction.prototype.getImage_asB64 = function() {\n  return /** @type {string} */ (jspb.Message.bytesAsB64(\n      this.getImage()));\n};\n\n\n/**\n * optional bytes image = 3;\n * Note that Uint8Array is not supported on all browsers.\n * @see http://caniuse.com/Uint8Array\n * This is a type-conversion wrapper around `getImage()`\n * @return {!Uint8Array}\n */\nproto.Instruction.prototype.getImage_asU8 = function() {\n  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(\n      this.getImage()));\n};\n\n\n/** @param {!(string|Uint8Array)} value */\nproto.Instruction.prototype.setImage = function(value) {\n  jspb.Message.setProto3BytesField(this, 3, value);\n};\n\n\n/**\n * optional bytes video = 4;\n * @return {!(string|Uint8Array)}\n */\nproto.Instruction.prototype.getVideo = function() {\n  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 4, \"\"));\n};\n\n\n/**\n * optional bytes video = 4;\n * This is a type-conversion wrapper around `getVideo()`\n * @return {string}\n */\nproto.Instruction.prototype.getVideo_asB64 = function() {\n  return /** @type {string} */ (jspb.Message.bytesAsB64(\n      this.getVideo()));\n};\n\n\n/**\n * optional bytes video = 4;\n * Note that Uint8Array is not supported on all browsers.\n * @see http://caniuse.com/Uint8Array\n * This is a type-conversion wrapper around `getVideo()`\n * @return {!Uint8Array}\n */\nproto.Instruction.prototype.getVideo_asU8 = function() {\n  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(\n      this.getVideo()));\n};\n\n\n/** @param {!(string|Uint8Array)} value */\nproto.Instruction.prototype.setVideo = function(value) {\n  jspb.Message.setProto3BytesField(this, 4, value);\n};\n\n\n\n/**\n * Generated by JsPbCodeGenerator.\n * @param {Array=} opt_data Optional initial data array, typically from a\n * server response, or constructed directly in Javascript. The array is used\n * in place and becomes part of the constructed object. It is not cloned.\n * If no data is provided, the constructed object will be empty, but still\n * valid.\n * @extends {jspb.Message}\n * @constructor\n */\nproto.Transition = function(opt_data) {\n  jspb.Message.initialize(this, opt_data, 0, -1, proto.Transition.repeatedFields_, null);\n};\ngoog.inherits(proto.Transition, jspb.Message);\nif (goog.DEBUG && !COMPILED) {\n  proto.Transition.displayName = 'proto.Transition';\n}\n/**\n * List of repeated fields within this message type.\n * @private {!Array<number>}\n * @const\n */\nproto.Transition.repeatedFields_ = [2];\n\n\n\nif (jspb.Message.GENERATE_TO_OBJECT) {\n/**\n * Creates an object representation of this proto suitable for use in Soy templates.\n * Field names that are reserved in JavaScript and will be renamed to pb_name.\n * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.\n * For the list of reserved names please see:\n *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.\n * @param {boolean=} opt_includeInstance Whether to include the JSPB instance\n *     for transitional soy proto support: http://goto/soy-param-migration\n * @return {!Object}\n */\nproto.Transition.prototype.toObject = function(opt_includeInstance) {\n  return proto.Transition.toObject(opt_includeInstance, this);\n};\n\n\n/**\n * Static version of the {@see toObject} method.\n * @param {boolean|undefined} includeInstance Whether to include the JSPB\n *     instance for transitional soy proto support:\n *     http://goto/soy-param-migration\n * @param {!proto.Transition} msg The msg instance to transform.\n * @return {!Object}\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\nproto.Transition.toObject = function(includeInstance, msg) {\n  var f, obj = {\n    name: jspb.Message.getFieldWithDefault(msg, 1, \"\"),\n    predicatesList: jspb.Message.toObjectList(msg.getPredicatesList(),\n    proto.TransitionPredicate.toObject, includeInstance),\n    instruction: (f = msg.getInstruction()) && proto.Instruction.toObject(includeInstance, f),\n    nextState: jspb.Message.getFieldWithDefault(msg, 4, \"\")\n  };\n\n  if (includeInstance) {\n    obj.$jspbMessageInstance = msg;\n  }\n  return obj;\n};\n}\n\n\n/**\n * Deserializes binary data (in protobuf wire format).\n * @param {jspb.ByteSource} bytes The bytes to deserialize.\n * @return {!proto.Transition}\n */\nproto.Transition.deserializeBinary = function(bytes) {\n  var reader = new jspb.BinaryReader(bytes);\n  var msg = new proto.Transition;\n  return proto.Transition.deserializeBinaryFromReader(msg, reader);\n};\n\n\n/**\n * Deserializes binary data (in protobuf wire format) from the\n * given reader into the given message object.\n * @param {!proto.Transition} msg The message object to deserialize into.\n * @param {!jspb.BinaryReader} reader The BinaryReader to use.\n * @return {!proto.Transition}\n */\nproto.Transition.deserializeBinaryFromReader = function(msg, reader) {\n  while (reader.nextField()) {\n    if (reader.isEndGroup()) {\n      break;\n    }\n    var field = reader.getFieldNumber();\n    switch (field) {\n    case 1:\n      var value = /** @type {string} */ (reader.readString());\n      msg.setName(value);\n      break;\n    case 2:\n      var value = new proto.TransitionPredicate;\n      reader.readMessage(value,proto.TransitionPredicate.deserializeBinaryFromReader);\n      msg.addPredicates(value);\n      break;\n    case 3:\n      var value = new proto.Instruction;\n      reader.readMessage(value,proto.Instruction.deserializeBinaryFromReader);\n      msg.setInstruction(value);\n      break;\n    case 4:\n      var value = /** @type {string} */ (reader.readString());\n      msg.setNextState(value);\n      break;\n    default:\n      reader.skipField();\n      break;\n    }\n  }\n  return msg;\n};\n\n\n/**\n * Serializes the message to binary data (in protobuf wire format).\n * @return {!Uint8Array}\n */\nproto.Transition.prototype.serializeBinary = function() {\n  var writer = new jspb.BinaryWriter();\n  proto.Transition.serializeBinaryToWriter(this, writer);\n  return writer.getResultBuffer();\n};\n\n\n/**\n * Serializes the given message to binary data (in protobuf wire\n * format), writing to the given BinaryWriter.\n * @param {!proto.Transition} message\n * @param {!jspb.BinaryWriter} writer\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\nproto.Transition.serializeBinaryToWriter = function(message, writer) {\n  var f = undefined;\n  f = message.getName();\n  if (f.length > 0) {\n    writer.writeString(\n      1,\n      f\n    );\n  }\n  f = message.getPredicatesList();\n  if (f.length > 0) {\n    writer.writeRepeatedMessage(\n      2,\n      f,\n      proto.TransitionPredicate.serializeBinaryToWriter\n    );\n  }\n  f = message.getInstruction();\n  if (f != null) {\n    writer.writeMessage(\n      3,\n      f,\n      proto.Instruction.serializeBinaryToWriter\n    );\n  }\n  f = message.getNextState();\n  if (f.length > 0) {\n    writer.writeString(\n      4,\n      f\n    );\n  }\n};\n\n\n/**\n * optional string name = 1;\n * @return {string}\n */\nproto.Transition.prototype.getName = function() {\n  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, \"\"));\n};\n\n\n/** @param {string} value */\nproto.Transition.prototype.setName = function(value) {\n  jspb.Message.setProto3StringField(this, 1, value);\n};\n\n\n/**\n * repeated TransitionPredicate predicates = 2;\n * @return {!Array<!proto.TransitionPredicate>}\n */\nproto.Transition.prototype.getPredicatesList = function() {\n  return /** @type{!Array<!proto.TransitionPredicate>} */ (\n    jspb.Message.getRepeatedWrapperField(this, proto.TransitionPredicate, 2));\n};\n\n\n/** @param {!Array<!proto.TransitionPredicate>} value */\nproto.Transition.prototype.setPredicatesList = function(value) {\n  jspb.Message.setRepeatedWrapperField(this, 2, value);\n};\n\n\n/**\n * @param {!proto.TransitionPredicate=} opt_value\n * @param {number=} opt_index\n * @return {!proto.TransitionPredicate}\n */\nproto.Transition.prototype.addPredicates = function(opt_value, opt_index) {\n  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.TransitionPredicate, opt_index);\n};\n\n\nproto.Transition.prototype.clearPredicatesList = function() {\n  this.setPredicatesList([]);\n};\n\n\n/**\n * optional Instruction instruction = 3;\n * @return {?proto.Instruction}\n */\nproto.Transition.prototype.getInstruction = function() {\n  return /** @type{?proto.Instruction} */ (\n    jspb.Message.getWrapperField(this, proto.Instruction, 3));\n};\n\n\n/** @param {?proto.Instruction|undefined} value */\nproto.Transition.prototype.setInstruction = function(value) {\n  jspb.Message.setWrapperField(this, 3, value);\n};\n\n\nproto.Transition.prototype.clearInstruction = function() {\n  this.setInstruction(undefined);\n};\n\n\n/**\n * Returns whether this field is set.\n * @return {!boolean}\n */\nproto.Transition.prototype.hasInstruction = function() {\n  return jspb.Message.getField(this, 3) != null;\n};\n\n\n/**\n * optional string next_state = 4;\n * @return {string}\n */\nproto.Transition.prototype.getNextState = function() {\n  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, \"\"));\n};\n\n\n/** @param {string} value */\nproto.Transition.prototype.setNextState = function(value) {\n  jspb.Message.setProto3StringField(this, 4, value);\n};\n\n\n\n/**\n * Generated by JsPbCodeGenerator.\n * @param {Array=} opt_data Optional initial data array, typically from a\n * server response, or constructed directly in Javascript. The array is used\n * in place and becomes part of the constructed object. It is not cloned.\n * If no data is provided, the constructed object will be empty, but still\n * valid.\n * @extends {jspb.Message}\n * @constructor\n */\nproto.Processor = function(opt_data) {\n  jspb.Message.initialize(this, opt_data, 0, -1, null, null);\n};\ngoog.inherits(proto.Processor, jspb.Message);\nif (goog.DEBUG && !COMPILED) {\n  proto.Processor.displayName = 'proto.Processor';\n}\n\n\nif (jspb.Message.GENERATE_TO_OBJECT) {\n/**\n * Creates an object representation of this proto suitable for use in Soy templates.\n * Field names that are reserved in JavaScript and will be renamed to pb_name.\n * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.\n * For the list of reserved names please see:\n *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.\n * @param {boolean=} opt_includeInstance Whether to include the JSPB instance\n *     for transitional soy proto support: http://goto/soy-param-migration\n * @return {!Object}\n */\nproto.Processor.prototype.toObject = function(opt_includeInstance) {\n  return proto.Processor.toObject(opt_includeInstance, this);\n};\n\n\n/**\n * Static version of the {@see toObject} method.\n * @param {boolean|undefined} includeInstance Whether to include the JSPB\n *     instance for transitional soy proto support:\n *     http://goto/soy-param-migration\n * @param {!proto.Processor} msg The msg instance to transform.\n * @return {!Object}\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\nproto.Processor.toObject = function(includeInstance, msg) {\n  var f, obj = {\n    name: jspb.Message.getFieldWithDefault(msg, 1, \"\"),\n    callableName: jspb.Message.getFieldWithDefault(msg, 2, \"\"),\n    callableKwargsMap: (f = msg.getCallableKwargsMap()) ? f.toObject(includeInstance, undefined) : [],\n    callableArgs: jspb.Message.getFieldWithDefault(msg, 4, \"\")\n  };\n\n  if (includeInstance) {\n    obj.$jspbMessageInstance = msg;\n  }\n  return obj;\n};\n}\n\n\n/**\n * Deserializes binary data (in protobuf wire format).\n * @param {jspb.ByteSource} bytes The bytes to deserialize.\n * @return {!proto.Processor}\n */\nproto.Processor.deserializeBinary = function(bytes) {\n  var reader = new jspb.BinaryReader(bytes);\n  var msg = new proto.Processor;\n  return proto.Processor.deserializeBinaryFromReader(msg, reader);\n};\n\n\n/**\n * Deserializes binary data (in protobuf wire format) from the\n * given reader into the given message object.\n * @param {!proto.Processor} msg The message object to deserialize into.\n * @param {!jspb.BinaryReader} reader The BinaryReader to use.\n * @return {!proto.Processor}\n */\nproto.Processor.deserializeBinaryFromReader = function(msg, reader) {\n  while (reader.nextField()) {\n    if (reader.isEndGroup()) {\n      break;\n    }\n    var field = reader.getFieldNumber();\n    switch (field) {\n    case 1:\n      var value = /** @type {string} */ (reader.readString());\n      msg.setName(value);\n      break;\n    case 2:\n      var value = /** @type {string} */ (reader.readString());\n      msg.setCallableName(value);\n      break;\n    case 3:\n      var value = msg.getCallableKwargsMap();\n      reader.readMessage(value, function(message, reader) {\n        jspb.Map.deserializeBinary(message, reader, jspb.BinaryReader.prototype.readString, jspb.BinaryReader.prototype.readBytes, null, \"\");\n         });\n      break;\n    case 4:\n      var value = /** @type {string} */ (reader.readString());\n      msg.setCallableArgs(value);\n      break;\n    default:\n      reader.skipField();\n      break;\n    }\n  }\n  return msg;\n};\n\n\n/**\n * Serializes the message to binary data (in protobuf wire format).\n * @return {!Uint8Array}\n */\nproto.Processor.prototype.serializeBinary = function() {\n  var writer = new jspb.BinaryWriter();\n  proto.Processor.serializeBinaryToWriter(this, writer);\n  return writer.getResultBuffer();\n};\n\n\n/**\n * Serializes the given message to binary data (in protobuf wire\n * format), writing to the given BinaryWriter.\n * @param {!proto.Processor} message\n * @param {!jspb.BinaryWriter} writer\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\nproto.Processor.serializeBinaryToWriter = function(message, writer) {\n  var f = undefined;\n  f = message.getName();\n  if (f.length > 0) {\n    writer.writeString(\n      1,\n      f\n    );\n  }\n  f = message.getCallableName();\n  if (f.length > 0) {\n    writer.writeString(\n      2,\n      f\n    );\n  }\n  f = message.getCallableKwargsMap(true);\n  if (f && f.getLength() > 0) {\n    f.serializeBinary(3, writer, jspb.BinaryWriter.prototype.writeString, jspb.BinaryWriter.prototype.writeBytes);\n  }\n  f = message.getCallableArgs();\n  if (f.length > 0) {\n    writer.writeString(\n      4,\n      f\n    );\n  }\n};\n\n\n/**\n * optional string name = 1;\n * @return {string}\n */\nproto.Processor.prototype.getName = function() {\n  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, \"\"));\n};\n\n\n/** @param {string} value */\nproto.Processor.prototype.setName = function(value) {\n  jspb.Message.setProto3StringField(this, 1, value);\n};\n\n\n/**\n * optional string callable_name = 2;\n * @return {string}\n */\nproto.Processor.prototype.getCallableName = function() {\n  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, \"\"));\n};\n\n\n/** @param {string} value */\nproto.Processor.prototype.setCallableName = function(value) {\n  jspb.Message.setProto3StringField(this, 2, value);\n};\n\n\n/**\n * map<string, bytes> callable_kwargs = 3;\n * @param {boolean=} opt_noLazyCreate Do not create the map if\n * empty, instead returning `undefined`\n * @return {!jspb.Map<string,!(string|Uint8Array)>}\n */\nproto.Processor.prototype.getCallableKwargsMap = function(opt_noLazyCreate) {\n  return /** @type {!jspb.Map<string,!(string|Uint8Array)>} */ (\n      jspb.Message.getMapField(this, 3, opt_noLazyCreate,\n      null));\n};\n\n\nproto.Processor.prototype.clearCallableKwargsMap = function() {\n  this.getCallableKwargsMap().clear();\n};\n\n\n/**\n * optional string callable_args = 4;\n * @return {string}\n */\nproto.Processor.prototype.getCallableArgs = function() {\n  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, \"\"));\n};\n\n\n/** @param {string} value */\nproto.Processor.prototype.setCallableArgs = function(value) {\n  jspb.Message.setProto3StringField(this, 4, value);\n};\n\n\n\n/**\n * Generated by JsPbCodeGenerator.\n * @param {Array=} opt_data Optional initial data array, typically from a\n * server response, or constructed directly in Javascript. The array is used\n * in place and becomes part of the constructed object. It is not cloned.\n * If no data is provided, the constructed object will be empty, but still\n * valid.\n * @extends {jspb.Message}\n * @constructor\n */\nproto.State = function(opt_data) {\n  jspb.Message.initialize(this, opt_data, 0, -1, proto.State.repeatedFields_, null);\n};\ngoog.inherits(proto.State, jspb.Message);\nif (goog.DEBUG && !COMPILED) {\n  proto.State.displayName = 'proto.State';\n}\n/**\n * List of repeated fields within this message type.\n * @private {!Array<number>}\n * @const\n */\nproto.State.repeatedFields_ = [2,3];\n\n\n\nif (jspb.Message.GENERATE_TO_OBJECT) {\n/**\n * Creates an object representation of this proto suitable for use in Soy templates.\n * Field names that are reserved in JavaScript and will be renamed to pb_name.\n * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.\n * For the list of reserved names please see:\n *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.\n * @param {boolean=} opt_includeInstance Whether to include the JSPB instance\n *     for transitional soy proto support: http://goto/soy-param-migration\n * @return {!Object}\n */\nproto.State.prototype.toObject = function(opt_includeInstance) {\n  return proto.State.toObject(opt_includeInstance, this);\n};\n\n\n/**\n * Static version of the {@see toObject} method.\n * @param {boolean|undefined} includeInstance Whether to include the JSPB\n *     instance for transitional soy proto support:\n *     http://goto/soy-param-migration\n * @param {!proto.State} msg The msg instance to transform.\n * @return {!Object}\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\nproto.State.toObject = function(includeInstance, msg) {\n  var f, obj = {\n    name: jspb.Message.getFieldWithDefault(msg, 1, \"\"),\n    processorsList: jspb.Message.toObjectList(msg.getProcessorsList(),\n    proto.Processor.toObject, includeInstance),\n    transitionsList: jspb.Message.toObjectList(msg.getTransitionsList(),\n    proto.Transition.toObject, includeInstance)\n  };\n\n  if (includeInstance) {\n    obj.$jspbMessageInstance = msg;\n  }\n  return obj;\n};\n}\n\n\n/**\n * Deserializes binary data (in protobuf wire format).\n * @param {jspb.ByteSource} bytes The bytes to deserialize.\n * @return {!proto.State}\n */\nproto.State.deserializeBinary = function(bytes) {\n  var reader = new jspb.BinaryReader(bytes);\n  var msg = new proto.State;\n  return proto.State.deserializeBinaryFromReader(msg, reader);\n};\n\n\n/**\n * Deserializes binary data (in protobuf wire format) from the\n * given reader into the given message object.\n * @param {!proto.State} msg The message object to deserialize into.\n * @param {!jspb.BinaryReader} reader The BinaryReader to use.\n * @return {!proto.State}\n */\nproto.State.deserializeBinaryFromReader = function(msg, reader) {\n  while (reader.nextField()) {\n    if (reader.isEndGroup()) {\n      break;\n    }\n    var field = reader.getFieldNumber();\n    switch (field) {\n    case 1:\n      var value = /** @type {string} */ (reader.readString());\n      msg.setName(value);\n      break;\n    case 2:\n      var value = new proto.Processor;\n      reader.readMessage(value,proto.Processor.deserializeBinaryFromReader);\n      msg.addProcessors(value);\n      break;\n    case 3:\n      var value = new proto.Transition;\n      reader.readMessage(value,proto.Transition.deserializeBinaryFromReader);\n      msg.addTransitions(value);\n      break;\n    default:\n      reader.skipField();\n      break;\n    }\n  }\n  return msg;\n};\n\n\n/**\n * Serializes the message to binary data (in protobuf wire format).\n * @return {!Uint8Array}\n */\nproto.State.prototype.serializeBinary = function() {\n  var writer = new jspb.BinaryWriter();\n  proto.State.serializeBinaryToWriter(this, writer);\n  return writer.getResultBuffer();\n};\n\n\n/**\n * Serializes the given message to binary data (in protobuf wire\n * format), writing to the given BinaryWriter.\n * @param {!proto.State} message\n * @param {!jspb.BinaryWriter} writer\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\nproto.State.serializeBinaryToWriter = function(message, writer) {\n  var f = undefined;\n  f = message.getName();\n  if (f.length > 0) {\n    writer.writeString(\n      1,\n      f\n    );\n  }\n  f = message.getProcessorsList();\n  if (f.length > 0) {\n    writer.writeRepeatedMessage(\n      2,\n      f,\n      proto.Processor.serializeBinaryToWriter\n    );\n  }\n  f = message.getTransitionsList();\n  if (f.length > 0) {\n    writer.writeRepeatedMessage(\n      3,\n      f,\n      proto.Transition.serializeBinaryToWriter\n    );\n  }\n};\n\n\n/**\n * optional string name = 1;\n * @return {string}\n */\nproto.State.prototype.getName = function() {\n  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, \"\"));\n};\n\n\n/** @param {string} value */\nproto.State.prototype.setName = function(value) {\n  jspb.Message.setProto3StringField(this, 1, value);\n};\n\n\n/**\n * repeated Processor processors = 2;\n * @return {!Array<!proto.Processor>}\n */\nproto.State.prototype.getProcessorsList = function() {\n  return /** @type{!Array<!proto.Processor>} */ (\n    jspb.Message.getRepeatedWrapperField(this, proto.Processor, 2));\n};\n\n\n/** @param {!Array<!proto.Processor>} value */\nproto.State.prototype.setProcessorsList = function(value) {\n  jspb.Message.setRepeatedWrapperField(this, 2, value);\n};\n\n\n/**\n * @param {!proto.Processor=} opt_value\n * @param {number=} opt_index\n * @return {!proto.Processor}\n */\nproto.State.prototype.addProcessors = function(opt_value, opt_index) {\n  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.Processor, opt_index);\n};\n\n\nproto.State.prototype.clearProcessorsList = function() {\n  this.setProcessorsList([]);\n};\n\n\n/**\n * repeated Transition transitions = 3;\n * @return {!Array<!proto.Transition>}\n */\nproto.State.prototype.getTransitionsList = function() {\n  return /** @type{!Array<!proto.Transition>} */ (\n    jspb.Message.getRepeatedWrapperField(this, proto.Transition, 3));\n};\n\n\n/** @param {!Array<!proto.Transition>} value */\nproto.State.prototype.setTransitionsList = function(value) {\n  jspb.Message.setRepeatedWrapperField(this, 3, value);\n};\n\n\n/**\n * @param {!proto.Transition=} opt_value\n * @param {number=} opt_index\n * @return {!proto.Transition}\n */\nproto.State.prototype.addTransitions = function(opt_value, opt_index) {\n  return jspb.Message.addToRepeatedWrapperField(this, 3, opt_value, proto.Transition, opt_index);\n};\n\n\nproto.State.prototype.clearTransitionsList = function() {\n  this.setTransitionsList([]);\n};\n\n\n\n/**\n * Generated by JsPbCodeGenerator.\n * @param {Array=} opt_data Optional initial data array, typically from a\n * server response, or constructed directly in Javascript. The array is used\n * in place and becomes part of the constructed object. It is not cloned.\n * If no data is provided, the constructed object will be empty, but still\n * valid.\n * @extends {jspb.Message}\n * @constructor\n */\nproto.StateMachine = function(opt_data) {\n  jspb.Message.initialize(this, opt_data, 0, -1, proto.StateMachine.repeatedFields_, null);\n};\ngoog.inherits(proto.StateMachine, jspb.Message);\nif (goog.DEBUG && !COMPILED) {\n  proto.StateMachine.displayName = 'proto.StateMachine';\n}\n/**\n * List of repeated fields within this message type.\n * @private {!Array<number>}\n * @const\n */\nproto.StateMachine.repeatedFields_ = [2];\n\n\n\nif (jspb.Message.GENERATE_TO_OBJECT) {\n/**\n * Creates an object representation of this proto suitable for use in Soy templates.\n * Field names that are reserved in JavaScript and will be renamed to pb_name.\n * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.\n * For the list of reserved names please see:\n *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.\n * @param {boolean=} opt_includeInstance Whether to include the JSPB instance\n *     for transitional soy proto support: http://goto/soy-param-migration\n * @return {!Object}\n */\nproto.StateMachine.prototype.toObject = function(opt_includeInstance) {\n  return proto.StateMachine.toObject(opt_includeInstance, this);\n};\n\n\n/**\n * Static version of the {@see toObject} method.\n * @param {boolean|undefined} includeInstance Whether to include the JSPB\n *     instance for transitional soy proto support:\n *     http://goto/soy-param-migration\n * @param {!proto.StateMachine} msg The msg instance to transform.\n * @return {!Object}\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\nproto.StateMachine.toObject = function(includeInstance, msg) {\n  var f, obj = {\n    name: jspb.Message.getFieldWithDefault(msg, 1, \"\"),\n    statesList: jspb.Message.toObjectList(msg.getStatesList(),\n    proto.State.toObject, includeInstance),\n    assetsMap: (f = msg.getAssetsMap()) ? f.toObject(includeInstance, undefined) : [],\n    startState: jspb.Message.getFieldWithDefault(msg, 4, \"\")\n  };\n\n  if (includeInstance) {\n    obj.$jspbMessageInstance = msg;\n  }\n  return obj;\n};\n}\n\n\n/**\n * Deserializes binary data (in protobuf wire format).\n * @param {jspb.ByteSource} bytes The bytes to deserialize.\n * @return {!proto.StateMachine}\n */\nproto.StateMachine.deserializeBinary = function(bytes) {\n  var reader = new jspb.BinaryReader(bytes);\n  var msg = new proto.StateMachine;\n  return proto.StateMachine.deserializeBinaryFromReader(msg, reader);\n};\n\n\n/**\n * Deserializes binary data (in protobuf wire format) from the\n * given reader into the given message object.\n * @param {!proto.StateMachine} msg The message object to deserialize into.\n * @param {!jspb.BinaryReader} reader The BinaryReader to use.\n * @return {!proto.StateMachine}\n */\nproto.StateMachine.deserializeBinaryFromReader = function(msg, reader) {\n  while (reader.nextField()) {\n    if (reader.isEndGroup()) {\n      break;\n    }\n    var field = reader.getFieldNumber();\n    switch (field) {\n    case 1:\n      var value = /** @type {string} */ (reader.readString());\n      msg.setName(value);\n      break;\n    case 2:\n      var value = new proto.State;\n      reader.readMessage(value,proto.State.deserializeBinaryFromReader);\n      msg.addStates(value);\n      break;\n    case 3:\n      var value = msg.getAssetsMap();\n      reader.readMessage(value, function(message, reader) {\n        jspb.Map.deserializeBinary(message, reader, jspb.BinaryReader.prototype.readString, jspb.BinaryReader.prototype.readBytes, null, \"\");\n         });\n      break;\n    case 4:\n      var value = /** @type {string} */ (reader.readString());\n      msg.setStartState(value);\n      break;\n    default:\n      reader.skipField();\n      break;\n    }\n  }\n  return msg;\n};\n\n\n/**\n * Serializes the message to binary data (in protobuf wire format).\n * @return {!Uint8Array}\n */\nproto.StateMachine.prototype.serializeBinary = function() {\n  var writer = new jspb.BinaryWriter();\n  proto.StateMachine.serializeBinaryToWriter(this, writer);\n  return writer.getResultBuffer();\n};\n\n\n/**\n * Serializes the given message to binary data (in protobuf wire\n * format), writing to the given BinaryWriter.\n * @param {!proto.StateMachine} message\n * @param {!jspb.BinaryWriter} writer\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\nproto.StateMachine.serializeBinaryToWriter = function(message, writer) {\n  var f = undefined;\n  f = message.getName();\n  if (f.length > 0) {\n    writer.writeString(\n      1,\n      f\n    );\n  }\n  f = message.getStatesList();\n  if (f.length > 0) {\n    writer.writeRepeatedMessage(\n      2,\n      f,\n      proto.State.serializeBinaryToWriter\n    );\n  }\n  f = message.getAssetsMap(true);\n  if (f && f.getLength() > 0) {\n    f.serializeBinary(3, writer, jspb.BinaryWriter.prototype.writeString, jspb.BinaryWriter.prototype.writeBytes);\n  }\n  f = message.getStartState();\n  if (f.length > 0) {\n    writer.writeString(\n      4,\n      f\n    );\n  }\n};\n\n\n/**\n * optional string name = 1;\n * @return {string}\n */\nproto.StateMachine.prototype.getName = function() {\n  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, \"\"));\n};\n\n\n/** @param {string} value */\nproto.StateMachine.prototype.setName = function(value) {\n  jspb.Message.setProto3StringField(this, 1, value);\n};\n\n\n/**\n * repeated State states = 2;\n * @return {!Array<!proto.State>}\n */\nproto.StateMachine.prototype.getStatesList = function() {\n  return /** @type{!Array<!proto.State>} */ (\n    jspb.Message.getRepeatedWrapperField(this, proto.State, 2));\n};\n\n\n/** @param {!Array<!proto.State>} value */\nproto.StateMachine.prototype.setStatesList = function(value) {\n  jspb.Message.setRepeatedWrapperField(this, 2, value);\n};\n\n\n/**\n * @param {!proto.State=} opt_value\n * @param {number=} opt_index\n * @return {!proto.State}\n */\nproto.StateMachine.prototype.addStates = function(opt_value, opt_index) {\n  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.State, opt_index);\n};\n\n\nproto.StateMachine.prototype.clearStatesList = function() {\n  this.setStatesList([]);\n};\n\n\n/**\n * map<string, bytes> assets = 3;\n * @param {boolean=} opt_noLazyCreate Do not create the map if\n * empty, instead returning `undefined`\n * @return {!jspb.Map<string,!(string|Uint8Array)>}\n */\nproto.StateMachine.prototype.getAssetsMap = function(opt_noLazyCreate) {\n  return /** @type {!jspb.Map<string,!(string|Uint8Array)>} */ (\n      jspb.Message.getMapField(this, 3, opt_noLazyCreate,\n      null));\n};\n\n\nproto.StateMachine.prototype.clearAssetsMap = function() {\n  this.getAssetsMap().clear();\n};\n\n\n/**\n * optional string start_state = 4;\n * @return {string}\n */\nproto.StateMachine.prototype.getStartState = function() {\n  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, \"\"));\n};\n\n\n/** @param {string} value */\nproto.StateMachine.prototype.setStartState = function(value) {\n  jspb.Message.setProto3StringField(this, 4, value);\n};\n\n\ngoog.object.extend(exports, proto);\n"],"sourceRoot":""}